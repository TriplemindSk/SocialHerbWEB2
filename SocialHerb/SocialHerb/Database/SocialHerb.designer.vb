'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SocialHerbnew")>  _
Partial Public Class SocialHerbDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAdmin(instance As Admin)
    End Sub
  Partial Private Sub UpdateAdmin(instance As Admin)
    End Sub
  Partial Private Sub DeleteAdmin(instance As Admin)
    End Sub
  Partial Private Sub InsertArticle(instance As Article)
    End Sub
  Partial Private Sub UpdateArticle(instance As Article)
    End Sub
  Partial Private Sub DeleteArticle(instance As Article)
    End Sub
  Partial Private Sub InsertArticleRating(instance As ArticleRating)
    End Sub
  Partial Private Sub UpdateArticleRating(instance As ArticleRating)
    End Sub
  Partial Private Sub DeleteArticleRating(instance As ArticleRating)
    End Sub
  Partial Private Sub InsertContact(instance As Contact)
    End Sub
  Partial Private Sub UpdateContact(instance As Contact)
    End Sub
  Partial Private Sub DeleteContact(instance As Contact)
    End Sub
  Partial Private Sub InsertDisease(instance As Disease)
    End Sub
  Partial Private Sub UpdateDisease(instance As Disease)
    End Sub
  Partial Private Sub DeleteDisease(instance As Disease)
    End Sub
  Partial Private Sub InsertDiseaseRating(instance As DiseaseRating)
    End Sub
  Partial Private Sub UpdateDiseaseRating(instance As DiseaseRating)
    End Sub
  Partial Private Sub DeleteDiseaseRating(instance As DiseaseRating)
    End Sub
  Partial Private Sub InsertHealthFood(instance As HealthFood)
    End Sub
  Partial Private Sub UpdateHealthFood(instance As HealthFood)
    End Sub
  Partial Private Sub DeleteHealthFood(instance As HealthFood)
    End Sub
  Partial Private Sub InsertHerb(instance As Herb)
    End Sub
  Partial Private Sub UpdateHerb(instance As Herb)
    End Sub
  Partial Private Sub DeleteHerb(instance As Herb)
    End Sub
  Partial Private Sub InsertHerbComment(instance As HerbComment)
    End Sub
  Partial Private Sub UpdateHerbComment(instance As HerbComment)
    End Sub
  Partial Private Sub DeleteHerbComment(instance As HerbComment)
    End Sub
  Partial Private Sub InsertHerbImg(instance As HerbImg)
    End Sub
  Partial Private Sub UpdateHerbImg(instance As HerbImg)
    End Sub
  Partial Private Sub DeleteHerbImg(instance As HerbImg)
    End Sub
  Partial Private Sub InsertHerbRating(instance As HerbRating)
    End Sub
  Partial Private Sub UpdateHerbRating(instance As HerbRating)
    End Sub
  Partial Private Sub DeleteHerbRating(instance As HerbRating)
    End Sub
  Partial Private Sub InsertHerbResearch(instance As HerbResearch)
    End Sub
  Partial Private Sub UpdateHerbResearch(instance As HerbResearch)
    End Sub
  Partial Private Sub DeleteHerbResearch(instance As HerbResearch)
    End Sub
  Partial Private Sub InsertImgArticle(instance As ImgArticle)
    End Sub
  Partial Private Sub UpdateImgArticle(instance As ImgArticle)
    End Sub
  Partial Private Sub DeleteImgArticle(instance As ImgArticle)
    End Sub
  Partial Private Sub InsertImgFood(instance As ImgFood)
    End Sub
  Partial Private Sub UpdateImgFood(instance As ImgFood)
    End Sub
  Partial Private Sub DeleteImgFood(instance As ImgFood)
    End Sub
  Partial Private Sub InsertImgHerb(instance As ImgHerb)
    End Sub
  Partial Private Sub UpdateImgHerb(instance As ImgHerb)
    End Sub
  Partial Private Sub DeleteImgHerb(instance As ImgHerb)
    End Sub
  Partial Private Sub InsertImgHerbBranch(instance As ImgHerbBranch)
    End Sub
  Partial Private Sub UpdateImgHerbBranch(instance As ImgHerbBranch)
    End Sub
  Partial Private Sub DeleteImgHerbBranch(instance As ImgHerbBranch)
    End Sub
  Partial Private Sub InsertImgHerbFlower(instance As ImgHerbFlower)
    End Sub
  Partial Private Sub UpdateImgHerbFlower(instance As ImgHerbFlower)
    End Sub
  Partial Private Sub DeleteImgHerbFlower(instance As ImgHerbFlower)
    End Sub
  Partial Private Sub InsertImgHerbFruit(instance As ImgHerbFruit)
    End Sub
  Partial Private Sub UpdateImgHerbFruit(instance As ImgHerbFruit)
    End Sub
  Partial Private Sub DeleteImgHerbFruit(instance As ImgHerbFruit)
    End Sub
  Partial Private Sub InsertImgHerbLeaf(instance As ImgHerbLeaf)
    End Sub
  Partial Private Sub UpdateImgHerbLeaf(instance As ImgHerbLeaf)
    End Sub
  Partial Private Sub DeleteImgHerbLeaf(instance As ImgHerbLeaf)
    End Sub
  Partial Private Sub InsertImgHerbRoot(instance As ImgHerbRoot)
    End Sub
  Partial Private Sub UpdateImgHerbRoot(instance As ImgHerbRoot)
    End Sub
  Partial Private Sub DeleteImgHerbRoot(instance As ImgHerbRoot)
    End Sub
  Partial Private Sub InsertImgHerbSeed(instance As ImgHerbSeed)
    End Sub
  Partial Private Sub UpdateImgHerbSeed(instance As ImgHerbSeed)
    End Sub
  Partial Private Sub DeleteImgHerbSeed(instance As ImgHerbSeed)
    End Sub
  Partial Private Sub InsertImgHerbTrunk(instance As ImgHerbTrunk)
    End Sub
  Partial Private Sub UpdateImgHerbTrunk(instance As ImgHerbTrunk)
    End Sub
  Partial Private Sub DeleteImgHerbTrunk(instance As ImgHerbTrunk)
    End Sub
  Partial Private Sub InsertImgInfo(instance As ImgInfo)
    End Sub
  Partial Private Sub UpdateImgInfo(instance As ImgInfo)
    End Sub
  Partial Private Sub DeleteImgInfo(instance As ImgInfo)
    End Sub
  Partial Private Sub InsertInfographic(instance As Infographic)
    End Sub
  Partial Private Sub UpdateInfographic(instance As Infographic)
    End Sub
  Partial Private Sub DeleteInfographic(instance As Infographic)
    End Sub
  Partial Private Sub InsertInfographicRating(instance As InfographicRating)
    End Sub
  Partial Private Sub UpdateInfographicRating(instance As InfographicRating)
    End Sub
  Partial Private Sub DeleteInfographicRating(instance As InfographicRating)
    End Sub
  Partial Private Sub InsertPharmacist(instance As Pharmacist)
    End Sub
  Partial Private Sub UpdatePharmacist(instance As Pharmacist)
    End Sub
  Partial Private Sub DeletePharmacist(instance As Pharmacist)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SocialHerb").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Admins() As System.Data.Linq.Table(Of Admin)
		Get
			Return Me.GetTable(Of Admin)
		End Get
	End Property
	
	Public ReadOnly Property Articles() As System.Data.Linq.Table(Of Article)
		Get
			Return Me.GetTable(Of Article)
		End Get
	End Property
	
	Public ReadOnly Property ArticleRatings() As System.Data.Linq.Table(Of ArticleRating)
		Get
			Return Me.GetTable(Of ArticleRating)
		End Get
	End Property
	
	Public ReadOnly Property Contacts() As System.Data.Linq.Table(Of Contact)
		Get
			Return Me.GetTable(Of Contact)
		End Get
	End Property
	
	Public ReadOnly Property Diseases() As System.Data.Linq.Table(Of Disease)
		Get
			Return Me.GetTable(Of Disease)
		End Get
	End Property
	
	Public ReadOnly Property DiseaseRatings() As System.Data.Linq.Table(Of DiseaseRating)
		Get
			Return Me.GetTable(Of DiseaseRating)
		End Get
	End Property
	
	Public ReadOnly Property HealthFoods() As System.Data.Linq.Table(Of HealthFood)
		Get
			Return Me.GetTable(Of HealthFood)
		End Get
	End Property
	
	Public ReadOnly Property Herbs() As System.Data.Linq.Table(Of Herb)
		Get
			Return Me.GetTable(Of Herb)
		End Get
	End Property
	
	Public ReadOnly Property HerbComments() As System.Data.Linq.Table(Of HerbComment)
		Get
			Return Me.GetTable(Of HerbComment)
		End Get
	End Property
	
	Public ReadOnly Property HerbImgs() As System.Data.Linq.Table(Of HerbImg)
		Get
			Return Me.GetTable(Of HerbImg)
		End Get
	End Property
	
	Public ReadOnly Property HerbRatings() As System.Data.Linq.Table(Of HerbRating)
		Get
			Return Me.GetTable(Of HerbRating)
		End Get
	End Property
	
	Public ReadOnly Property HerbResearches() As System.Data.Linq.Table(Of HerbResearch)
		Get
			Return Me.GetTable(Of HerbResearch)
		End Get
	End Property
	
	Public ReadOnly Property ImgArticles() As System.Data.Linq.Table(Of ImgArticle)
		Get
			Return Me.GetTable(Of ImgArticle)
		End Get
	End Property
	
	Public ReadOnly Property ImgFoods() As System.Data.Linq.Table(Of ImgFood)
		Get
			Return Me.GetTable(Of ImgFood)
		End Get
	End Property
	
	Public ReadOnly Property ImgHerbs() As System.Data.Linq.Table(Of ImgHerb)
		Get
			Return Me.GetTable(Of ImgHerb)
		End Get
	End Property
	
	Public ReadOnly Property ImgHerbBranches() As System.Data.Linq.Table(Of ImgHerbBranch)
		Get
			Return Me.GetTable(Of ImgHerbBranch)
		End Get
	End Property
	
	Public ReadOnly Property ImgHerbFlowers() As System.Data.Linq.Table(Of ImgHerbFlower)
		Get
			Return Me.GetTable(Of ImgHerbFlower)
		End Get
	End Property
	
	Public ReadOnly Property ImgHerbFruits() As System.Data.Linq.Table(Of ImgHerbFruit)
		Get
			Return Me.GetTable(Of ImgHerbFruit)
		End Get
	End Property
	
	Public ReadOnly Property ImgHerbLeafs() As System.Data.Linq.Table(Of ImgHerbLeaf)
		Get
			Return Me.GetTable(Of ImgHerbLeaf)
		End Get
	End Property
	
	Public ReadOnly Property ImgHerbRoots() As System.Data.Linq.Table(Of ImgHerbRoot)
		Get
			Return Me.GetTable(Of ImgHerbRoot)
		End Get
	End Property
	
	Public ReadOnly Property ImgHerbSeeds() As System.Data.Linq.Table(Of ImgHerbSeed)
		Get
			Return Me.GetTable(Of ImgHerbSeed)
		End Get
	End Property
	
	Public ReadOnly Property ImgHerbTrunks() As System.Data.Linq.Table(Of ImgHerbTrunk)
		Get
			Return Me.GetTable(Of ImgHerbTrunk)
		End Get
	End Property
	
	Public ReadOnly Property ImgInfos() As System.Data.Linq.Table(Of ImgInfo)
		Get
			Return Me.GetTable(Of ImgInfo)
		End Get
	End Property
	
	Public ReadOnly Property Infographics() As System.Data.Linq.Table(Of Infographic)
		Get
			Return Me.GetTable(Of Infographic)
		End Get
	End Property
	
	Public ReadOnly Property InfographicRatings() As System.Data.Linq.Table(Of InfographicRating)
		Get
			Return Me.GetTable(Of InfographicRating)
		End Get
	End Property
	
	Public ReadOnly Property Pharmacists() As System.Data.Linq.Table(Of Pharmacist)
		Get
			Return Me.GetTable(Of Pharmacist)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Admin")>  _
Partial Public Class Admin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _usernameAd As String
	
	Private _passwordAd As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameAdChanging(value As String)
    End Sub
    Partial Private Sub OnusernameAdChanged()
    End Sub
    Partial Private Sub OnpasswordAdChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordAdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usernameAd", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property usernameAd() As String
		Get
			Return Me._usernameAd
		End Get
		Set
			If (String.Equals(Me._usernameAd, value) = false) Then
				Me.OnusernameAdChanging(value)
				Me.SendPropertyChanging
				Me._usernameAd = value
				Me.SendPropertyChanged("usernameAd")
				Me.OnusernameAdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_passwordAd", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property passwordAd() As String
		Get
			Return Me._passwordAd
		End Get
		Set
			If (String.Equals(Me._passwordAd, value) = false) Then
				Me.OnpasswordAdChanging(value)
				Me.SendPropertyChanging
				Me._passwordAd = value
				Me.SendPropertyChanged("passwordAd")
				Me.OnpasswordAdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Article")>  _
Partial Public Class Article
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _articleID As String
	
	Private _articleName As String
	
	Private _article As String
	
	Private _articleCredit As String
	
	Private _dateArt As Date
	
	Private _ArticleRatings As EntitySet(Of ArticleRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnarticleIDChanging(value As String)
    End Sub
    Partial Private Sub OnarticleIDChanged()
    End Sub
    Partial Private Sub OnarticleNameChanging(value As String)
    End Sub
    Partial Private Sub OnarticleNameChanged()
    End Sub
    Partial Private Sub OnarticleChanging(value As String)
    End Sub
    Partial Private Sub OnarticleChanged()
    End Sub
    Partial Private Sub OnarticleCreditChanging(value As String)
    End Sub
    Partial Private Sub OnarticleCreditChanged()
    End Sub
    Partial Private Sub OndateArtChanging(value As Date)
    End Sub
    Partial Private Sub OndateArtChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ArticleRatings = New EntitySet(Of ArticleRating)(AddressOf Me.attach_ArticleRatings, AddressOf Me.detach_ArticleRatings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property articleID() As String
		Get
			Return Me._articleID
		End Get
		Set
			If (String.Equals(Me._articleID, value) = false) Then
				Me.OnarticleIDChanging(value)
				Me.SendPropertyChanging
				Me._articleID = value
				Me.SendPropertyChanged("articleID")
				Me.OnarticleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleName", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property articleName() As String
		Get
			Return Me._articleName
		End Get
		Set
			If (String.Equals(Me._articleName, value) = false) Then
				Me.OnarticleNameChanging(value)
				Me.SendPropertyChanging
				Me._articleName = value
				Me.SendPropertyChanged("articleName")
				Me.OnarticleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_article", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property article() As String
		Get
			Return Me._article
		End Get
		Set
			If (String.Equals(Me._article, value) = false) Then
				Me.OnarticleChanging(value)
				Me.SendPropertyChanging
				Me._article = value
				Me.SendPropertyChanged("article")
				Me.OnarticleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleCredit", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property articleCredit() As String
		Get
			Return Me._articleCredit
		End Get
		Set
			If (String.Equals(Me._articleCredit, value) = false) Then
				Me.OnarticleCreditChanging(value)
				Me.SendPropertyChanging
				Me._articleCredit = value
				Me.SendPropertyChanged("articleCredit")
				Me.OnarticleCreditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateArt", DbType:="Date NOT NULL")>  _
	Public Property dateArt() As Date
		Get
			Return Me._dateArt
		End Get
		Set
			If ((Me._dateArt = value)  _
						= false) Then
				Me.OndateArtChanging(value)
				Me.SendPropertyChanging
				Me._dateArt = value
				Me.SendPropertyChanged("dateArt")
				Me.OndateArtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_ArticleRating", Storage:="_ArticleRatings", ThisKey:="articleID", OtherKey:="articleID")>  _
	Public Property ArticleRatings() As EntitySet(Of ArticleRating)
		Get
			Return Me._ArticleRatings
		End Get
		Set
			Me._ArticleRatings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ArticleRatings(ByVal entity As ArticleRating)
		Me.SendPropertyChanging
		entity.Article = Me
	End Sub
	
	Private Sub detach_ArticleRatings(ByVal entity As ArticleRating)
		Me.SendPropertyChanging
		entity.Article = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ArticleRating")>  _
Partial Public Class ArticleRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _articleRatID As String
	
	Private _ratingArt As Double
	
	Private _articleID As String
	
	Private _usernameArt As String
	
	Private _Article As EntityRef(Of Article)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnarticleRatIDChanging(value As String)
    End Sub
    Partial Private Sub OnarticleRatIDChanged()
    End Sub
    Partial Private Sub OnratingArtChanging(value As Double)
    End Sub
    Partial Private Sub OnratingArtChanged()
    End Sub
    Partial Private Sub OnarticleIDChanging(value As String)
    End Sub
    Partial Private Sub OnarticleIDChanged()
    End Sub
    Partial Private Sub OnusernameArtChanging(value As String)
    End Sub
    Partial Private Sub OnusernameArtChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Article = CType(Nothing, EntityRef(Of Article))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleRatID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property articleRatID() As String
		Get
			Return Me._articleRatID
		End Get
		Set
			If (String.Equals(Me._articleRatID, value) = false) Then
				Me.OnarticleRatIDChanging(value)
				Me.SendPropertyChanging
				Me._articleRatID = value
				Me.SendPropertyChanged("articleRatID")
				Me.OnarticleRatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ratingArt", DbType:="Float NOT NULL")>  _
	Public Property ratingArt() As Double
		Get
			Return Me._ratingArt
		End Get
		Set
			If ((Me._ratingArt = value)  _
						= false) Then
				Me.OnratingArtChanging(value)
				Me.SendPropertyChanging
				Me._ratingArt = value
				Me.SendPropertyChanged("ratingArt")
				Me.OnratingArtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property articleID() As String
		Get
			Return Me._articleID
		End Get
		Set
			If (String.Equals(Me._articleID, value) = false) Then
				If Me._Article.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnarticleIDChanging(value)
				Me.SendPropertyChanging
				Me._articleID = value
				Me.SendPropertyChanged("articleID")
				Me.OnarticleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usernameArt", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property usernameArt() As String
		Get
			Return Me._usernameArt
		End Get
		Set
			If (String.Equals(Me._usernameArt, value) = false) Then
				Me.OnusernameArtChanging(value)
				Me.SendPropertyChanging
				Me._usernameArt = value
				Me.SendPropertyChanged("usernameArt")
				Me.OnusernameArtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_ArticleRating", Storage:="_Article", ThisKey:="articleID", OtherKey:="articleID", IsForeignKey:=true)>  _
	Public Property Article() As Article
		Get
			Return Me._Article.Entity
		End Get
		Set
			Dim previousValue As Article = Me._Article.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Article.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Article.Entity = Nothing
					previousValue.ArticleRatings.Remove(Me)
				End If
				Me._Article.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ArticleRatings.Add(Me)
					Me._articleID = value.articleID
				Else
					Me._articleID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Article")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Contact")>  _
Partial Public Class Contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As String
	
	Private _contactName As String
	
	Private _tel As System.Nullable(Of Integer)
	
	Private _email As String
	
	Private _Address As String
	
	Private _role As String
	
	Private _website As String
	
	Private _date As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As String)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OncontactNameChanging(value As String)
    End Sub
    Partial Private Sub OncontactNameChanged()
    End Sub
    Partial Private Sub OntelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntelChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnroleChanging(value As String)
    End Sub
    Partial Private Sub OnroleChanged()
    End Sub
    Partial Private Sub OnwebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnwebsiteChanged()
    End Sub
    Partial Private Sub OndateChanging(value As Date)
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ID() As String
		Get
			Return Me._ID
		End Get
		Set
			If (String.Equals(Me._ID, value) = false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contactName", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property contactName() As String
		Get
			Return Me._contactName
		End Get
		Set
			If (String.Equals(Me._contactName, value) = false) Then
				Me.OncontactNameChanging(value)
				Me.SendPropertyChanging
				Me._contactName = value
				Me.SendPropertyChanged("contactName")
				Me.OncontactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tel", DbType:="Int")>  _
	Public Property tel() As System.Nullable(Of Integer)
		Get
			Return Me._tel
		End Get
		Set
			If (Me._tel.Equals(value) = false) Then
				Me.OntelChanging(value)
				Me.SendPropertyChanging
				Me._tel = value
				Me.SendPropertyChanged("tel")
				Me.OntelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_role", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property role() As String
		Get
			Return Me._role
		End Get
		Set
			If (String.Equals(Me._role, value) = false) Then
				Me.OnroleChanging(value)
				Me.SendPropertyChanging
				Me._role = value
				Me.SendPropertyChanged("role")
				Me.OnroleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_website", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property website() As String
		Get
			Return Me._website
		End Get
		Set
			If (String.Equals(Me._website, value) = false) Then
				Me.OnwebsiteChanging(value)
				Me.SendPropertyChanging
				Me._website = value
				Me.SendPropertyChanged("website")
				Me.OnwebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="Date NOT NULL")>  _
	Public Property [date]() As Date
		Get
			Return Me._date
		End Get
		Set
			If ((Me._date = value)  _
						= false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Disease")>  _
Partial Public Class Disease
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _diseaseID As String
	
	Private _diseaseName As String
	
	Private _Symptom As String
	
	Private _howtoRelief As String
	
	Private _herb As String
	
	Private _dateDisease As Date
	
	Private _DiseaseRatings As EntitySet(Of DiseaseRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OndiseaseIDChanging(value As String)
    End Sub
    Partial Private Sub OndiseaseIDChanged()
    End Sub
    Partial Private Sub OndiseaseNameChanging(value As String)
    End Sub
    Partial Private Sub OndiseaseNameChanged()
    End Sub
    Partial Private Sub OnSymptomChanging(value As String)
    End Sub
    Partial Private Sub OnSymptomChanged()
    End Sub
    Partial Private Sub OnhowtoReliefChanging(value As String)
    End Sub
    Partial Private Sub OnhowtoReliefChanged()
    End Sub
    Partial Private Sub OnherbChanging(value As String)
    End Sub
    Partial Private Sub OnherbChanged()
    End Sub
    Partial Private Sub OndateDiseaseChanging(value As Date)
    End Sub
    Partial Private Sub OndateDiseaseChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DiseaseRatings = New EntitySet(Of DiseaseRating)(AddressOf Me.attach_DiseaseRatings, AddressOf Me.detach_DiseaseRatings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_diseaseID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property diseaseID() As String
		Get
			Return Me._diseaseID
		End Get
		Set
			If (String.Equals(Me._diseaseID, value) = false) Then
				Me.OndiseaseIDChanging(value)
				Me.SendPropertyChanging
				Me._diseaseID = value
				Me.SendPropertyChanged("diseaseID")
				Me.OndiseaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_diseaseName", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property diseaseName() As String
		Get
			Return Me._diseaseName
		End Get
		Set
			If (String.Equals(Me._diseaseName, value) = false) Then
				Me.OndiseaseNameChanging(value)
				Me.SendPropertyChanging
				Me._diseaseName = value
				Me.SendPropertyChanged("diseaseName")
				Me.OndiseaseNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Symptom", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Symptom() As String
		Get
			Return Me._Symptom
		End Get
		Set
			If (String.Equals(Me._Symptom, value) = false) Then
				Me.OnSymptomChanging(value)
				Me.SendPropertyChanging
				Me._Symptom = value
				Me.SendPropertyChanged("Symptom")
				Me.OnSymptomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_howtoRelief", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property howtoRelief() As String
		Get
			Return Me._howtoRelief
		End Get
		Set
			If (String.Equals(Me._howtoRelief, value) = false) Then
				Me.OnhowtoReliefChanging(value)
				Me.SendPropertyChanging
				Me._howtoRelief = value
				Me.SendPropertyChanged("howtoRelief")
				Me.OnhowtoReliefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herb", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property herb() As String
		Get
			Return Me._herb
		End Get
		Set
			If (String.Equals(Me._herb, value) = false) Then
				Me.OnherbChanging(value)
				Me.SendPropertyChanging
				Me._herb = value
				Me.SendPropertyChanged("herb")
				Me.OnherbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisease", DbType:="Date NOT NULL")>  _
	Public Property dateDisease() As Date
		Get
			Return Me._dateDisease
		End Get
		Set
			If ((Me._dateDisease = value)  _
						= false) Then
				Me.OndateDiseaseChanging(value)
				Me.SendPropertyChanging
				Me._dateDisease = value
				Me.SendPropertyChanged("dateDisease")
				Me.OndateDiseaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Disease_DiseaseRating", Storage:="_DiseaseRatings", ThisKey:="diseaseID", OtherKey:="diseaseID")>  _
	Public Property DiseaseRatings() As EntitySet(Of DiseaseRating)
		Get
			Return Me._DiseaseRatings
		End Get
		Set
			Me._DiseaseRatings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DiseaseRatings(ByVal entity As DiseaseRating)
		Me.SendPropertyChanging
		entity.Disease = Me
	End Sub
	
	Private Sub detach_DiseaseRatings(ByVal entity As DiseaseRating)
		Me.SendPropertyChanging
		entity.Disease = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DiseaseRating")>  _
Partial Public Class DiseaseRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _diRatID As String
	
	Private _ratingDi As Double
	
	Private _diseaseID As String
	
	Private _usernameDi As String
	
	Private _Disease As EntityRef(Of Disease)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OndiRatIDChanging(value As String)
    End Sub
    Partial Private Sub OndiRatIDChanged()
    End Sub
    Partial Private Sub OnratingDiChanging(value As Double)
    End Sub
    Partial Private Sub OnratingDiChanged()
    End Sub
    Partial Private Sub OndiseaseIDChanging(value As String)
    End Sub
    Partial Private Sub OndiseaseIDChanged()
    End Sub
    Partial Private Sub OnusernameDiChanging(value As String)
    End Sub
    Partial Private Sub OnusernameDiChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Disease = CType(Nothing, EntityRef(Of Disease))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_diRatID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property diRatID() As String
		Get
			Return Me._diRatID
		End Get
		Set
			If (String.Equals(Me._diRatID, value) = false) Then
				Me.OndiRatIDChanging(value)
				Me.SendPropertyChanging
				Me._diRatID = value
				Me.SendPropertyChanged("diRatID")
				Me.OndiRatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ratingDi", DbType:="Float NOT NULL")>  _
	Public Property ratingDi() As Double
		Get
			Return Me._ratingDi
		End Get
		Set
			If ((Me._ratingDi = value)  _
						= false) Then
				Me.OnratingDiChanging(value)
				Me.SendPropertyChanging
				Me._ratingDi = value
				Me.SendPropertyChanged("ratingDi")
				Me.OnratingDiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_diseaseID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property diseaseID() As String
		Get
			Return Me._diseaseID
		End Get
		Set
			If (String.Equals(Me._diseaseID, value) = false) Then
				If Me._Disease.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OndiseaseIDChanging(value)
				Me.SendPropertyChanging
				Me._diseaseID = value
				Me.SendPropertyChanged("diseaseID")
				Me.OndiseaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usernameDi", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property usernameDi() As String
		Get
			Return Me._usernameDi
		End Get
		Set
			If (String.Equals(Me._usernameDi, value) = false) Then
				Me.OnusernameDiChanging(value)
				Me.SendPropertyChanging
				Me._usernameDi = value
				Me.SendPropertyChanged("usernameDi")
				Me.OnusernameDiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Disease_DiseaseRating", Storage:="_Disease", ThisKey:="diseaseID", OtherKey:="diseaseID", IsForeignKey:=true)>  _
	Public Property Disease() As Disease
		Get
			Return Me._Disease.Entity
		End Get
		Set
			Dim previousValue As Disease = Me._Disease.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Disease.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Disease.Entity = Nothing
					previousValue.DiseaseRatings.Remove(Me)
				End If
				Me._Disease.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DiseaseRatings.Add(Me)
					Me._diseaseID = value.diseaseID
				Else
					Me._diseaseID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Disease")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HealthFood")>  _
Partial Public Class HealthFood
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _foodID As String
	
	Private _foodName As String
	
	Private _foodRecipe As String
	
	Private _foodHowto As String
	
	Private _creditFood As String
	
	Private _foodBenefit As String
	
	Private _dateFood As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnfoodIDChanging(value As String)
    End Sub
    Partial Private Sub OnfoodIDChanged()
    End Sub
    Partial Private Sub OnfoodNameChanging(value As String)
    End Sub
    Partial Private Sub OnfoodNameChanged()
    End Sub
    Partial Private Sub OnfoodRecipeChanging(value As String)
    End Sub
    Partial Private Sub OnfoodRecipeChanged()
    End Sub
    Partial Private Sub OnfoodHowtoChanging(value As String)
    End Sub
    Partial Private Sub OnfoodHowtoChanged()
    End Sub
    Partial Private Sub OncreditFoodChanging(value As String)
    End Sub
    Partial Private Sub OncreditFoodChanged()
    End Sub
    Partial Private Sub OnfoodBenefitChanging(value As String)
    End Sub
    Partial Private Sub OnfoodBenefitChanged()
    End Sub
    Partial Private Sub OndateFoodChanging(value As Date)
    End Sub
    Partial Private Sub OndateFoodChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foodID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property foodID() As String
		Get
			Return Me._foodID
		End Get
		Set
			If (String.Equals(Me._foodID, value) = false) Then
				Me.OnfoodIDChanging(value)
				Me.SendPropertyChanging
				Me._foodID = value
				Me.SendPropertyChanged("foodID")
				Me.OnfoodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foodName", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property foodName() As String
		Get
			Return Me._foodName
		End Get
		Set
			If (String.Equals(Me._foodName, value) = false) Then
				Me.OnfoodNameChanging(value)
				Me.SendPropertyChanging
				Me._foodName = value
				Me.SendPropertyChanged("foodName")
				Me.OnfoodNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foodRecipe", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property foodRecipe() As String
		Get
			Return Me._foodRecipe
		End Get
		Set
			If (String.Equals(Me._foodRecipe, value) = false) Then
				Me.OnfoodRecipeChanging(value)
				Me.SendPropertyChanging
				Me._foodRecipe = value
				Me.SendPropertyChanged("foodRecipe")
				Me.OnfoodRecipeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foodHowto", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property foodHowto() As String
		Get
			Return Me._foodHowto
		End Get
		Set
			If (String.Equals(Me._foodHowto, value) = false) Then
				Me.OnfoodHowtoChanging(value)
				Me.SendPropertyChanging
				Me._foodHowto = value
				Me.SendPropertyChanged("foodHowto")
				Me.OnfoodHowtoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creditFood", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property creditFood() As String
		Get
			Return Me._creditFood
		End Get
		Set
			If (String.Equals(Me._creditFood, value) = false) Then
				Me.OncreditFoodChanging(value)
				Me.SendPropertyChanging
				Me._creditFood = value
				Me.SendPropertyChanged("creditFood")
				Me.OncreditFoodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_foodBenefit", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property foodBenefit() As String
		Get
			Return Me._foodBenefit
		End Get
		Set
			If (String.Equals(Me._foodBenefit, value) = false) Then
				Me.OnfoodBenefitChanging(value)
				Me.SendPropertyChanging
				Me._foodBenefit = value
				Me.SendPropertyChanged("foodBenefit")
				Me.OnfoodBenefitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateFood", DbType:="Date NOT NULL")>  _
	Public Property dateFood() As Date
		Get
			Return Me._dateFood
		End Get
		Set
			If ((Me._dateFood = value)  _
						= false) Then
				Me.OndateFoodChanging(value)
				Me.SendPropertyChanging
				Me._dateFood = value
				Me.SendPropertyChanged("dateFood")
				Me.OndateFoodChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Herb")>  _
Partial Public Class Herb
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _herbID As String
	
	Private _herbName As String
	
	Private _herbOtherName As String
	
	Private _howto As String
	
	Private _warning As String
	
	Private _properties As String
	
	Private _dateHerb As Date
	
	Private _HerbImgs As EntitySet(Of HerbImg)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnherbIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbIDChanged()
    End Sub
    Partial Private Sub OnherbNameChanging(value As String)
    End Sub
    Partial Private Sub OnherbNameChanged()
    End Sub
    Partial Private Sub OnherbOtherNameChanging(value As String)
    End Sub
    Partial Private Sub OnherbOtherNameChanged()
    End Sub
    Partial Private Sub OnhowtoChanging(value As String)
    End Sub
    Partial Private Sub OnhowtoChanged()
    End Sub
    Partial Private Sub OnwarningChanging(value As String)
    End Sub
    Partial Private Sub OnwarningChanged()
    End Sub
    Partial Private Sub OnpropertiesChanging(value As String)
    End Sub
    Partial Private Sub OnpropertiesChanged()
    End Sub
    Partial Private Sub OndateHerbChanging(value As Date)
    End Sub
    Partial Private Sub OndateHerbChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HerbImgs = New EntitySet(Of HerbImg)(AddressOf Me.attach_HerbImgs, AddressOf Me.detach_HerbImgs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property herbID() As String
		Get
			Return Me._herbID
		End Get
		Set
			If (String.Equals(Me._herbID, value) = false) Then
				Me.OnherbIDChanging(value)
				Me.SendPropertyChanging
				Me._herbID = value
				Me.SendPropertyChanged("herbID")
				Me.OnherbIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbName", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property herbName() As String
		Get
			Return Me._herbName
		End Get
		Set
			If (String.Equals(Me._herbName, value) = false) Then
				Me.OnherbNameChanging(value)
				Me.SendPropertyChanging
				Me._herbName = value
				Me.SendPropertyChanged("herbName")
				Me.OnherbNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbOtherName", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property herbOtherName() As String
		Get
			Return Me._herbOtherName
		End Get
		Set
			If (String.Equals(Me._herbOtherName, value) = false) Then
				Me.OnherbOtherNameChanging(value)
				Me.SendPropertyChanging
				Me._herbOtherName = value
				Me.SendPropertyChanged("herbOtherName")
				Me.OnherbOtherNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_howto", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property howto() As String
		Get
			Return Me._howto
		End Get
		Set
			If (String.Equals(Me._howto, value) = false) Then
				Me.OnhowtoChanging(value)
				Me.SendPropertyChanging
				Me._howto = value
				Me.SendPropertyChanged("howto")
				Me.OnhowtoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_warning", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property warning() As String
		Get
			Return Me._warning
		End Get
		Set
			If (String.Equals(Me._warning, value) = false) Then
				Me.OnwarningChanging(value)
				Me.SendPropertyChanging
				Me._warning = value
				Me.SendPropertyChanged("warning")
				Me.OnwarningChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_properties", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property properties() As String
		Get
			Return Me._properties
		End Get
		Set
			If (String.Equals(Me._properties, value) = false) Then
				Me.OnpropertiesChanging(value)
				Me.SendPropertyChanging
				Me._properties = value
				Me.SendPropertyChanged("properties")
				Me.OnpropertiesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateHerb", DbType:="Date NOT NULL")>  _
	Public Property dateHerb() As Date
		Get
			Return Me._dateHerb
		End Get
		Set
			If ((Me._dateHerb = value)  _
						= false) Then
				Me.OndateHerbChanging(value)
				Me.SendPropertyChanging
				Me._dateHerb = value
				Me.SendPropertyChanged("dateHerb")
				Me.OndateHerbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Herb_HerbImg", Storage:="_HerbImgs", ThisKey:="herbID", OtherKey:="herbID")>  _
	Public Property HerbImgs() As EntitySet(Of HerbImg)
		Get
			Return Me._HerbImgs
		End Get
		Set
			Me._HerbImgs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_HerbImgs(ByVal entity As HerbImg)
		Me.SendPropertyChanging
		entity.Herb = Me
	End Sub
	
	Private Sub detach_HerbImgs(ByVal entity As HerbImg)
		Me.SendPropertyChanging
		entity.Herb = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HerbComment")>  _
Partial Public Class HerbComment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _herbCommentID As String
	
	Private _herbComment As String
	
	Private _herbIdCom As String
	
	Private _usernameHerbCom As String
	
	Private _dateHerbCom As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnherbCommentIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbCommentIDChanged()
    End Sub
    Partial Private Sub OnherbCommentChanging(value As String)
    End Sub
    Partial Private Sub OnherbCommentChanged()
    End Sub
    Partial Private Sub OnherbIdComChanging(value As String)
    End Sub
    Partial Private Sub OnherbIdComChanged()
    End Sub
    Partial Private Sub OnusernameHerbComChanging(value As String)
    End Sub
    Partial Private Sub OnusernameHerbComChanged()
    End Sub
    Partial Private Sub OndateHerbComChanging(value As Date)
    End Sub
    Partial Private Sub OndateHerbComChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbCommentID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property herbCommentID() As String
		Get
			Return Me._herbCommentID
		End Get
		Set
			If (String.Equals(Me._herbCommentID, value) = false) Then
				Me.OnherbCommentIDChanging(value)
				Me.SendPropertyChanging
				Me._herbCommentID = value
				Me.SendPropertyChanged("herbCommentID")
				Me.OnherbCommentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbComment", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property herbComment() As String
		Get
			Return Me._herbComment
		End Get
		Set
			If (String.Equals(Me._herbComment, value) = false) Then
				Me.OnherbCommentChanging(value)
				Me.SendPropertyChanging
				Me._herbComment = value
				Me.SendPropertyChanged("herbComment")
				Me.OnherbCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbIdCom", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property herbIdCom() As String
		Get
			Return Me._herbIdCom
		End Get
		Set
			If (String.Equals(Me._herbIdCom, value) = false) Then
				Me.OnherbIdComChanging(value)
				Me.SendPropertyChanging
				Me._herbIdCom = value
				Me.SendPropertyChanged("herbIdCom")
				Me.OnherbIdComChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usernameHerbCom", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property usernameHerbCom() As String
		Get
			Return Me._usernameHerbCom
		End Get
		Set
			If (String.Equals(Me._usernameHerbCom, value) = false) Then
				Me.OnusernameHerbComChanging(value)
				Me.SendPropertyChanging
				Me._usernameHerbCom = value
				Me.SendPropertyChanged("usernameHerbCom")
				Me.OnusernameHerbComChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateHerbCom", DbType:="Date NOT NULL")>  _
	Public Property dateHerbCom() As Date
		Get
			Return Me._dateHerbCom
		End Get
		Set
			If ((Me._dateHerbCom = value)  _
						= false) Then
				Me.OndateHerbComChanging(value)
				Me.SendPropertyChanging
				Me._dateHerbCom = value
				Me.SendPropertyChanged("dateHerbCom")
				Me.OndateHerbComChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HerbImg")>  _
Partial Public Class HerbImg
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _herbImgID As String
	
	Private _herbID As String
	
	Private _leaf As String
	
	Private _branch As String
	
	Private _trunk As String
	
	Private _root As String
	
	Private _flower As String
	
	Private _fruit As String
	
	Private _seed As String
	
	Private _Herb As EntityRef(Of Herb)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnherbImgIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbImgIDChanged()
    End Sub
    Partial Private Sub OnherbIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbIDChanged()
    End Sub
    Partial Private Sub OnleafChanging(value As String)
    End Sub
    Partial Private Sub OnleafChanged()
    End Sub
    Partial Private Sub OnbranchChanging(value As String)
    End Sub
    Partial Private Sub OnbranchChanged()
    End Sub
    Partial Private Sub OntrunkChanging(value As String)
    End Sub
    Partial Private Sub OntrunkChanged()
    End Sub
    Partial Private Sub OnrootChanging(value As String)
    End Sub
    Partial Private Sub OnrootChanged()
    End Sub
    Partial Private Sub OnflowerChanging(value As String)
    End Sub
    Partial Private Sub OnflowerChanged()
    End Sub
    Partial Private Sub OnfruitChanging(value As String)
    End Sub
    Partial Private Sub OnfruitChanged()
    End Sub
    Partial Private Sub OnseedChanging(value As String)
    End Sub
    Partial Private Sub OnseedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Herb = CType(Nothing, EntityRef(Of Herb))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbImgID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property herbImgID() As String
		Get
			Return Me._herbImgID
		End Get
		Set
			If (String.Equals(Me._herbImgID, value) = false) Then
				Me.OnherbImgIDChanging(value)
				Me.SendPropertyChanging
				Me._herbImgID = value
				Me.SendPropertyChanged("herbImgID")
				Me.OnherbImgIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property herbID() As String
		Get
			Return Me._herbID
		End Get
		Set
			If (String.Equals(Me._herbID, value) = false) Then
				If Me._Herb.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnherbIDChanging(value)
				Me.SendPropertyChanging
				Me._herbID = value
				Me.SendPropertyChanged("herbID")
				Me.OnherbIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leaf", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property leaf() As String
		Get
			Return Me._leaf
		End Get
		Set
			If (String.Equals(Me._leaf, value) = false) Then
				Me.OnleafChanging(value)
				Me.SendPropertyChanging
				Me._leaf = value
				Me.SendPropertyChanged("leaf")
				Me.OnleafChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_branch", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property branch() As String
		Get
			Return Me._branch
		End Get
		Set
			If (String.Equals(Me._branch, value) = false) Then
				Me.OnbranchChanging(value)
				Me.SendPropertyChanging
				Me._branch = value
				Me.SendPropertyChanged("branch")
				Me.OnbranchChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trunk", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property trunk() As String
		Get
			Return Me._trunk
		End Get
		Set
			If (String.Equals(Me._trunk, value) = false) Then
				Me.OntrunkChanging(value)
				Me.SendPropertyChanging
				Me._trunk = value
				Me.SendPropertyChanged("trunk")
				Me.OntrunkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_root", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property root() As String
		Get
			Return Me._root
		End Get
		Set
			If (String.Equals(Me._root, value) = false) Then
				Me.OnrootChanging(value)
				Me.SendPropertyChanging
				Me._root = value
				Me.SendPropertyChanged("root")
				Me.OnrootChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_flower", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property flower() As String
		Get
			Return Me._flower
		End Get
		Set
			If (String.Equals(Me._flower, value) = false) Then
				Me.OnflowerChanging(value)
				Me.SendPropertyChanging
				Me._flower = value
				Me.SendPropertyChanged("flower")
				Me.OnflowerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fruit", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property fruit() As String
		Get
			Return Me._fruit
		End Get
		Set
			If (String.Equals(Me._fruit, value) = false) Then
				Me.OnfruitChanging(value)
				Me.SendPropertyChanging
				Me._fruit = value
				Me.SendPropertyChanged("fruit")
				Me.OnfruitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_seed", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property seed() As String
		Get
			Return Me._seed
		End Get
		Set
			If (String.Equals(Me._seed, value) = false) Then
				Me.OnseedChanging(value)
				Me.SendPropertyChanging
				Me._seed = value
				Me.SendPropertyChanged("seed")
				Me.OnseedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Herb_HerbImg", Storage:="_Herb", ThisKey:="herbID", OtherKey:="herbID", IsForeignKey:=true)>  _
	Public Property Herb() As Herb
		Get
			Return Me._Herb.Entity
		End Get
		Set
			Dim previousValue As Herb = Me._Herb.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Herb.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Herb.Entity = Nothing
					previousValue.HerbImgs.Remove(Me)
				End If
				Me._Herb.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HerbImgs.Add(Me)
					Me._herbID = value.herbID
				Else
					Me._herbID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Herb")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HerbRating")>  _
Partial Public Class HerbRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _herbRatID As String
	
	Private _ratingHerb As Double
	
	Private _herbIdRat As String
	
	Private _usernameRat As String
	
	Private _dateHerbRat As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnherbRatIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbRatIDChanged()
    End Sub
    Partial Private Sub OnratingHerbChanging(value As Double)
    End Sub
    Partial Private Sub OnratingHerbChanged()
    End Sub
    Partial Private Sub OnherbIdRatChanging(value As String)
    End Sub
    Partial Private Sub OnherbIdRatChanged()
    End Sub
    Partial Private Sub OnusernameRatChanging(value As String)
    End Sub
    Partial Private Sub OnusernameRatChanged()
    End Sub
    Partial Private Sub OndateHerbRatChanging(value As Date)
    End Sub
    Partial Private Sub OndateHerbRatChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbRatID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property herbRatID() As String
		Get
			Return Me._herbRatID
		End Get
		Set
			If (String.Equals(Me._herbRatID, value) = false) Then
				Me.OnherbRatIDChanging(value)
				Me.SendPropertyChanging
				Me._herbRatID = value
				Me.SendPropertyChanged("herbRatID")
				Me.OnherbRatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ratingHerb", DbType:="Float NOT NULL")>  _
	Public Property ratingHerb() As Double
		Get
			Return Me._ratingHerb
		End Get
		Set
			If ((Me._ratingHerb = value)  _
						= false) Then
				Me.OnratingHerbChanging(value)
				Me.SendPropertyChanging
				Me._ratingHerb = value
				Me.SendPropertyChanged("ratingHerb")
				Me.OnratingHerbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbIdRat", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property herbIdRat() As String
		Get
			Return Me._herbIdRat
		End Get
		Set
			If (String.Equals(Me._herbIdRat, value) = false) Then
				Me.OnherbIdRatChanging(value)
				Me.SendPropertyChanging
				Me._herbIdRat = value
				Me.SendPropertyChanged("herbIdRat")
				Me.OnherbIdRatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usernameRat", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property usernameRat() As String
		Get
			Return Me._usernameRat
		End Get
		Set
			If (String.Equals(Me._usernameRat, value) = false) Then
				Me.OnusernameRatChanging(value)
				Me.SendPropertyChanging
				Me._usernameRat = value
				Me.SendPropertyChanged("usernameRat")
				Me.OnusernameRatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateHerbRat", DbType:="Date NOT NULL")>  _
	Public Property dateHerbRat() As Date
		Get
			Return Me._dateHerbRat
		End Get
		Set
			If ((Me._dateHerbRat = value)  _
						= false) Then
				Me.OndateHerbRatChanging(value)
				Me.SendPropertyChanging
				Me._dateHerbRat = value
				Me.SendPropertyChanged("dateHerbRat")
				Me.OndateHerbRatChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HerbResearch")>  _
Partial Public Class HerbResearch
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _researchID As String
	
	Private _researchName As String
	
	Private _creditRe As String
	
	Private _link As String
	
	Private _herbIdRe As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnresearchIDChanging(value As String)
    End Sub
    Partial Private Sub OnresearchIDChanged()
    End Sub
    Partial Private Sub OnresearchNameChanging(value As String)
    End Sub
    Partial Private Sub OnresearchNameChanged()
    End Sub
    Partial Private Sub OncreditReChanging(value As String)
    End Sub
    Partial Private Sub OncreditReChanged()
    End Sub
    Partial Private Sub OnlinkChanging(value As String)
    End Sub
    Partial Private Sub OnlinkChanged()
    End Sub
    Partial Private Sub OnherbIdReChanging(value As String)
    End Sub
    Partial Private Sub OnherbIdReChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_researchID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property researchID() As String
		Get
			Return Me._researchID
		End Get
		Set
			If (String.Equals(Me._researchID, value) = false) Then
				Me.OnresearchIDChanging(value)
				Me.SendPropertyChanging
				Me._researchID = value
				Me.SendPropertyChanged("researchID")
				Me.OnresearchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_researchName", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property researchName() As String
		Get
			Return Me._researchName
		End Get
		Set
			If (String.Equals(Me._researchName, value) = false) Then
				Me.OnresearchNameChanging(value)
				Me.SendPropertyChanging
				Me._researchName = value
				Me.SendPropertyChanged("researchName")
				Me.OnresearchNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creditRe", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property creditRe() As String
		Get
			Return Me._creditRe
		End Get
		Set
			If (String.Equals(Me._creditRe, value) = false) Then
				Me.OncreditReChanging(value)
				Me.SendPropertyChanging
				Me._creditRe = value
				Me.SendPropertyChanged("creditRe")
				Me.OncreditReChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_link", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property link() As String
		Get
			Return Me._link
		End Get
		Set
			If (String.Equals(Me._link, value) = false) Then
				Me.OnlinkChanging(value)
				Me.SendPropertyChanging
				Me._link = value
				Me.SendPropertyChanged("link")
				Me.OnlinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbIdRe", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property herbIdRe() As String
		Get
			Return Me._herbIdRe
		End Get
		Set
			If (String.Equals(Me._herbIdRe, value) = false) Then
				Me.OnherbIdReChanging(value)
				Me.SendPropertyChanging
				Me._herbIdRe = value
				Me.SendPropertyChanged("herbIdRe")
				Me.OnherbIdReChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImgArticle")>  _
Partial Public Class ImgArticle
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImgArticleID As String
	
	Private _ArticlepicID As String
	
	Private _ImgArticle As System.Data.Linq.Binary
	
	Private _ImgArticlename As String
	
	Private _ImgArticleDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImgArticleIDChanging(value As String)
    End Sub
    Partial Private Sub OnImgArticleIDChanged()
    End Sub
    Partial Private Sub OnArticlepicIDChanging(value As String)
    End Sub
    Partial Private Sub OnArticlepicIDChanged()
    End Sub
    Partial Private Sub OnImgArticleChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgArticleChanged()
    End Sub
    Partial Private Sub OnImgArticlenameChanging(value As String)
    End Sub
    Partial Private Sub OnImgArticlenameChanged()
    End Sub
    Partial Private Sub OnImgArticleDateChanging(value As Date)
    End Sub
    Partial Private Sub OnImgArticleDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgArticleID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ImgArticleID() As String
		Get
			Return Me._ImgArticleID
		End Get
		Set
			If (String.Equals(Me._ImgArticleID, value) = false) Then
				Me.OnImgArticleIDChanging(value)
				Me.SendPropertyChanging
				Me._ImgArticleID = value
				Me.SendPropertyChanged("ImgArticleID")
				Me.OnImgArticleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArticlepicID", DbType:="VarChar(50)")>  _
	Public Property ArticlepicID() As String
		Get
			Return Me._ArticlepicID
		End Get
		Set
			If (String.Equals(Me._ArticlepicID, value) = false) Then
				Me.OnArticlepicIDChanging(value)
				Me.SendPropertyChanging
				Me._ArticlepicID = value
				Me.SendPropertyChanged("ArticlepicID")
				Me.OnArticlepicIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgArticle", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgArticle() As System.Data.Linq.Binary
		Get
			Return Me._ImgArticle
		End Get
		Set
			If (Object.Equals(Me._ImgArticle, value) = false) Then
				Me.OnImgArticleChanging(value)
				Me.SendPropertyChanging
				Me._ImgArticle = value
				Me.SendPropertyChanged("ImgArticle")
				Me.OnImgArticleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgArticlename", DbType:="VarChar(50)")>  _
	Public Property ImgArticlename() As String
		Get
			Return Me._ImgArticlename
		End Get
		Set
			If (String.Equals(Me._ImgArticlename, value) = false) Then
				Me.OnImgArticlenameChanging(value)
				Me.SendPropertyChanging
				Me._ImgArticlename = value
				Me.SendPropertyChanged("ImgArticlename")
				Me.OnImgArticlenameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgArticleDate", DbType:="Date NOT NULL")>  _
	Public Property ImgArticleDate() As Date
		Get
			Return Me._ImgArticleDate
		End Get
		Set
			If ((Me._ImgArticleDate = value)  _
						= false) Then
				Me.OnImgArticleDateChanging(value)
				Me.SendPropertyChanging
				Me._ImgArticleDate = value
				Me.SendPropertyChanged("ImgArticleDate")
				Me.OnImgArticleDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImgFood")>  _
Partial Public Class ImgFood
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImgFoodID As String
	
	Private _FoodpicdID As String
	
	Private _ImgFoodname As String
	
	Private _ImgFood As System.Data.Linq.Binary
	
	Private _ImgFoodDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImgFoodIDChanging(value As String)
    End Sub
    Partial Private Sub OnImgFoodIDChanged()
    End Sub
    Partial Private Sub OnFoodpicdIDChanging(value As String)
    End Sub
    Partial Private Sub OnFoodpicdIDChanged()
    End Sub
    Partial Private Sub OnImgFoodnameChanging(value As String)
    End Sub
    Partial Private Sub OnImgFoodnameChanged()
    End Sub
    Partial Private Sub OnImgFoodChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgFoodChanged()
    End Sub
    Partial Private Sub OnImgFoodDateChanging(value As Date)
    End Sub
    Partial Private Sub OnImgFoodDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFoodID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ImgFoodID() As String
		Get
			Return Me._ImgFoodID
		End Get
		Set
			If (String.Equals(Me._ImgFoodID, value) = false) Then
				Me.OnImgFoodIDChanging(value)
				Me.SendPropertyChanging
				Me._ImgFoodID = value
				Me.SendPropertyChanged("ImgFoodID")
				Me.OnImgFoodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FoodpicdID", DbType:="VarChar(50)")>  _
	Public Property FoodpicdID() As String
		Get
			Return Me._FoodpicdID
		End Get
		Set
			If (String.Equals(Me._FoodpicdID, value) = false) Then
				Me.OnFoodpicdIDChanging(value)
				Me.SendPropertyChanging
				Me._FoodpicdID = value
				Me.SendPropertyChanged("FoodpicdID")
				Me.OnFoodpicdIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFoodname", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgFoodname() As String
		Get
			Return Me._ImgFoodname
		End Get
		Set
			If (String.Equals(Me._ImgFoodname, value) = false) Then
				Me.OnImgFoodnameChanging(value)
				Me.SendPropertyChanging
				Me._ImgFoodname = value
				Me.SendPropertyChanged("ImgFoodname")
				Me.OnImgFoodnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFood", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgFood() As System.Data.Linq.Binary
		Get
			Return Me._ImgFood
		End Get
		Set
			If (Object.Equals(Me._ImgFood, value) = false) Then
				Me.OnImgFoodChanging(value)
				Me.SendPropertyChanging
				Me._ImgFood = value
				Me.SendPropertyChanged("ImgFood")
				Me.OnImgFoodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFoodDate", DbType:="Date NOT NULL")>  _
	Public Property ImgFoodDate() As Date
		Get
			Return Me._ImgFoodDate
		End Get
		Set
			If ((Me._ImgFoodDate = value)  _
						= false) Then
				Me.OnImgFoodDateChanging(value)
				Me.SendPropertyChanging
				Me._ImgFoodDate = value
				Me.SendPropertyChanged("ImgFoodDate")
				Me.OnImgFoodDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImgHerb")>  _
Partial Public Class ImgHerb
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImgherbId As String
	
	Private _HerbpicID As String
	
	Private _ImgHerbname As String
	
	Private _ImgHerb As System.Data.Linq.Binary
	
	Private _ImgHerbDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImgherbIdChanging(value As String)
    End Sub
    Partial Private Sub OnImgherbIdChanged()
    End Sub
    Partial Private Sub OnHerbpicIDChanging(value As String)
    End Sub
    Partial Private Sub OnHerbpicIDChanged()
    End Sub
    Partial Private Sub OnImgHerbnameChanging(value As String)
    End Sub
    Partial Private Sub OnImgHerbnameChanged()
    End Sub
    Partial Private Sub OnImgHerbChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgHerbChanged()
    End Sub
    Partial Private Sub OnImgHerbDateChanging(value As Date)
    End Sub
    Partial Private Sub OnImgHerbDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgherbId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ImgherbId() As String
		Get
			Return Me._ImgherbId
		End Get
		Set
			If (String.Equals(Me._ImgherbId, value) = false) Then
				Me.OnImgherbIdChanging(value)
				Me.SendPropertyChanging
				Me._ImgherbId = value
				Me.SendPropertyChanged("ImgherbId")
				Me.OnImgherbIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HerbpicID", DbType:="VarChar(50)")>  _
	Public Property HerbpicID() As String
		Get
			Return Me._HerbpicID
		End Get
		Set
			If (String.Equals(Me._HerbpicID, value) = false) Then
				Me.OnHerbpicIDChanging(value)
				Me.SendPropertyChanging
				Me._HerbpicID = value
				Me.SendPropertyChanged("HerbpicID")
				Me.OnHerbpicIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgHerbname", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgHerbname() As String
		Get
			Return Me._ImgHerbname
		End Get
		Set
			If (String.Equals(Me._ImgHerbname, value) = false) Then
				Me.OnImgHerbnameChanging(value)
				Me.SendPropertyChanging
				Me._ImgHerbname = value
				Me.SendPropertyChanged("ImgHerbname")
				Me.OnImgHerbnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgHerb", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgHerb() As System.Data.Linq.Binary
		Get
			Return Me._ImgHerb
		End Get
		Set
			If (Object.Equals(Me._ImgHerb, value) = false) Then
				Me.OnImgHerbChanging(value)
				Me.SendPropertyChanging
				Me._ImgHerb = value
				Me.SendPropertyChanged("ImgHerb")
				Me.OnImgHerbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgHerbDate", DbType:="Date NOT NULL")>  _
	Public Property ImgHerbDate() As Date
		Get
			Return Me._ImgHerbDate
		End Get
		Set
			If ((Me._ImgHerbDate = value)  _
						= false) Then
				Me.OnImgHerbDateChanging(value)
				Me.SendPropertyChanging
				Me._ImgHerbDate = value
				Me.SendPropertyChanged("ImgHerbDate")
				Me.OnImgHerbDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImgHerbBranch")>  _
Partial Public Class ImgHerbBranch
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImgBranchID As String
	
	Private _HerbBranchID As String
	
	Private _ImgBranchname As String
	
	Private _ImgBranch As System.Data.Linq.Binary
	
	Private _ImgBranchDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImgBranchIDChanging(value As String)
    End Sub
    Partial Private Sub OnImgBranchIDChanged()
    End Sub
    Partial Private Sub OnHerbBranchIDChanging(value As String)
    End Sub
    Partial Private Sub OnHerbBranchIDChanged()
    End Sub
    Partial Private Sub OnImgBranchnameChanging(value As String)
    End Sub
    Partial Private Sub OnImgBranchnameChanged()
    End Sub
    Partial Private Sub OnImgBranchChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgBranchChanged()
    End Sub
    Partial Private Sub OnImgBranchDateChanging(value As Date)
    End Sub
    Partial Private Sub OnImgBranchDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgBranchID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ImgBranchID() As String
		Get
			Return Me._ImgBranchID
		End Get
		Set
			If (String.Equals(Me._ImgBranchID, value) = false) Then
				Me.OnImgBranchIDChanging(value)
				Me.SendPropertyChanging
				Me._ImgBranchID = value
				Me.SendPropertyChanged("ImgBranchID")
				Me.OnImgBranchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HerbBranchID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HerbBranchID() As String
		Get
			Return Me._HerbBranchID
		End Get
		Set
			If (String.Equals(Me._HerbBranchID, value) = false) Then
				Me.OnHerbBranchIDChanging(value)
				Me.SendPropertyChanging
				Me._HerbBranchID = value
				Me.SendPropertyChanged("HerbBranchID")
				Me.OnHerbBranchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgBranchname", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgBranchname() As String
		Get
			Return Me._ImgBranchname
		End Get
		Set
			If (String.Equals(Me._ImgBranchname, value) = false) Then
				Me.OnImgBranchnameChanging(value)
				Me.SendPropertyChanging
				Me._ImgBranchname = value
				Me.SendPropertyChanged("ImgBranchname")
				Me.OnImgBranchnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgBranch", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgBranch() As System.Data.Linq.Binary
		Get
			Return Me._ImgBranch
		End Get
		Set
			If (Object.Equals(Me._ImgBranch, value) = false) Then
				Me.OnImgBranchChanging(value)
				Me.SendPropertyChanging
				Me._ImgBranch = value
				Me.SendPropertyChanged("ImgBranch")
				Me.OnImgBranchChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgBranchDate", DbType:="Date NOT NULL")>  _
	Public Property ImgBranchDate() As Date
		Get
			Return Me._ImgBranchDate
		End Get
		Set
			If ((Me._ImgBranchDate = value)  _
						= false) Then
				Me.OnImgBranchDateChanging(value)
				Me.SendPropertyChanging
				Me._ImgBranchDate = value
				Me.SendPropertyChanged("ImgBranchDate")
				Me.OnImgBranchDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImgHerbFlower")>  _
Partial Public Class ImgHerbFlower
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImgFlowerID As String
	
	Private _HerbFlowerID As String
	
	Private _ImgFlowername As String
	
	Private _ImgFlower As System.Data.Linq.Binary
	
	Private _ImgFlowerDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImgFlowerIDChanging(value As String)
    End Sub
    Partial Private Sub OnImgFlowerIDChanged()
    End Sub
    Partial Private Sub OnHerbFlowerIDChanging(value As String)
    End Sub
    Partial Private Sub OnHerbFlowerIDChanged()
    End Sub
    Partial Private Sub OnImgFlowernameChanging(value As String)
    End Sub
    Partial Private Sub OnImgFlowernameChanged()
    End Sub
    Partial Private Sub OnImgFlowerChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgFlowerChanged()
    End Sub
    Partial Private Sub OnImgFlowerDateChanging(value As Date)
    End Sub
    Partial Private Sub OnImgFlowerDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFlowerID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ImgFlowerID() As String
		Get
			Return Me._ImgFlowerID
		End Get
		Set
			If (String.Equals(Me._ImgFlowerID, value) = false) Then
				Me.OnImgFlowerIDChanging(value)
				Me.SendPropertyChanging
				Me._ImgFlowerID = value
				Me.SendPropertyChanged("ImgFlowerID")
				Me.OnImgFlowerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HerbFlowerID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HerbFlowerID() As String
		Get
			Return Me._HerbFlowerID
		End Get
		Set
			If (String.Equals(Me._HerbFlowerID, value) = false) Then
				Me.OnHerbFlowerIDChanging(value)
				Me.SendPropertyChanging
				Me._HerbFlowerID = value
				Me.SendPropertyChanged("HerbFlowerID")
				Me.OnHerbFlowerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFlowername", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgFlowername() As String
		Get
			Return Me._ImgFlowername
		End Get
		Set
			If (String.Equals(Me._ImgFlowername, value) = false) Then
				Me.OnImgFlowernameChanging(value)
				Me.SendPropertyChanging
				Me._ImgFlowername = value
				Me.SendPropertyChanged("ImgFlowername")
				Me.OnImgFlowernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFlower", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgFlower() As System.Data.Linq.Binary
		Get
			Return Me._ImgFlower
		End Get
		Set
			If (Object.Equals(Me._ImgFlower, value) = false) Then
				Me.OnImgFlowerChanging(value)
				Me.SendPropertyChanging
				Me._ImgFlower = value
				Me.SendPropertyChanged("ImgFlower")
				Me.OnImgFlowerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFlowerDate", DbType:="Date NOT NULL")>  _
	Public Property ImgFlowerDate() As Date
		Get
			Return Me._ImgFlowerDate
		End Get
		Set
			If ((Me._ImgFlowerDate = value)  _
						= false) Then
				Me.OnImgFlowerDateChanging(value)
				Me.SendPropertyChanging
				Me._ImgFlowerDate = value
				Me.SendPropertyChanged("ImgFlowerDate")
				Me.OnImgFlowerDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImgHerbFruit")>  _
Partial Public Class ImgHerbFruit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImgFruitID As String
	
	Private _HerbFruitID As String
	
	Private _ImgFruitname As String
	
	Private _ImgFruit As System.Data.Linq.Binary
	
	Private _ImgFruitDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImgFruitIDChanging(value As String)
    End Sub
    Partial Private Sub OnImgFruitIDChanged()
    End Sub
    Partial Private Sub OnHerbFruitIDChanging(value As String)
    End Sub
    Partial Private Sub OnHerbFruitIDChanged()
    End Sub
    Partial Private Sub OnImgFruitnameChanging(value As String)
    End Sub
    Partial Private Sub OnImgFruitnameChanged()
    End Sub
    Partial Private Sub OnImgFruitChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgFruitChanged()
    End Sub
    Partial Private Sub OnImgFruitDateChanging(value As Date)
    End Sub
    Partial Private Sub OnImgFruitDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFruitID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ImgFruitID() As String
		Get
			Return Me._ImgFruitID
		End Get
		Set
			If (String.Equals(Me._ImgFruitID, value) = false) Then
				Me.OnImgFruitIDChanging(value)
				Me.SendPropertyChanging
				Me._ImgFruitID = value
				Me.SendPropertyChanged("ImgFruitID")
				Me.OnImgFruitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HerbFruitID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HerbFruitID() As String
		Get
			Return Me._HerbFruitID
		End Get
		Set
			If (String.Equals(Me._HerbFruitID, value) = false) Then
				Me.OnHerbFruitIDChanging(value)
				Me.SendPropertyChanging
				Me._HerbFruitID = value
				Me.SendPropertyChanged("HerbFruitID")
				Me.OnHerbFruitIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFruitname", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgFruitname() As String
		Get
			Return Me._ImgFruitname
		End Get
		Set
			If (String.Equals(Me._ImgFruitname, value) = false) Then
				Me.OnImgFruitnameChanging(value)
				Me.SendPropertyChanging
				Me._ImgFruitname = value
				Me.SendPropertyChanged("ImgFruitname")
				Me.OnImgFruitnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFruit", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgFruit() As System.Data.Linq.Binary
		Get
			Return Me._ImgFruit
		End Get
		Set
			If (Object.Equals(Me._ImgFruit, value) = false) Then
				Me.OnImgFruitChanging(value)
				Me.SendPropertyChanging
				Me._ImgFruit = value
				Me.SendPropertyChanged("ImgFruit")
				Me.OnImgFruitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgFruitDate", DbType:="Date NOT NULL")>  _
	Public Property ImgFruitDate() As Date
		Get
			Return Me._ImgFruitDate
		End Get
		Set
			If ((Me._ImgFruitDate = value)  _
						= false) Then
				Me.OnImgFruitDateChanging(value)
				Me.SendPropertyChanging
				Me._ImgFruitDate = value
				Me.SendPropertyChanged("ImgFruitDate")
				Me.OnImgFruitDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImgHerbLeaf")>  _
Partial Public Class ImgHerbLeaf
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImgLeafID As String
	
	Private _HerbLeafID As String
	
	Private _ImgLeafname As String
	
	Private _ImgLeaf As System.Data.Linq.Binary
	
	Private _ImgLeafDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImgLeafIDChanging(value As String)
    End Sub
    Partial Private Sub OnImgLeafIDChanged()
    End Sub
    Partial Private Sub OnHerbLeafIDChanging(value As String)
    End Sub
    Partial Private Sub OnHerbLeafIDChanged()
    End Sub
    Partial Private Sub OnImgLeafnameChanging(value As String)
    End Sub
    Partial Private Sub OnImgLeafnameChanged()
    End Sub
    Partial Private Sub OnImgLeafChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgLeafChanged()
    End Sub
    Partial Private Sub OnImgLeafDateChanging(value As Date)
    End Sub
    Partial Private Sub OnImgLeafDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgLeafID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ImgLeafID() As String
		Get
			Return Me._ImgLeafID
		End Get
		Set
			If (String.Equals(Me._ImgLeafID, value) = false) Then
				Me.OnImgLeafIDChanging(value)
				Me.SendPropertyChanging
				Me._ImgLeafID = value
				Me.SendPropertyChanged("ImgLeafID")
				Me.OnImgLeafIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HerbLeafID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HerbLeafID() As String
		Get
			Return Me._HerbLeafID
		End Get
		Set
			If (String.Equals(Me._HerbLeafID, value) = false) Then
				Me.OnHerbLeafIDChanging(value)
				Me.SendPropertyChanging
				Me._HerbLeafID = value
				Me.SendPropertyChanged("HerbLeafID")
				Me.OnHerbLeafIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgLeafname", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgLeafname() As String
		Get
			Return Me._ImgLeafname
		End Get
		Set
			If (String.Equals(Me._ImgLeafname, value) = false) Then
				Me.OnImgLeafnameChanging(value)
				Me.SendPropertyChanging
				Me._ImgLeafname = value
				Me.SendPropertyChanged("ImgLeafname")
				Me.OnImgLeafnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgLeaf", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgLeaf() As System.Data.Linq.Binary
		Get
			Return Me._ImgLeaf
		End Get
		Set
			If (Object.Equals(Me._ImgLeaf, value) = false) Then
				Me.OnImgLeafChanging(value)
				Me.SendPropertyChanging
				Me._ImgLeaf = value
				Me.SendPropertyChanged("ImgLeaf")
				Me.OnImgLeafChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgLeafDate", DbType:="Date NOT NULL")>  _
	Public Property ImgLeafDate() As Date
		Get
			Return Me._ImgLeafDate
		End Get
		Set
			If ((Me._ImgLeafDate = value)  _
						= false) Then
				Me.OnImgLeafDateChanging(value)
				Me.SendPropertyChanging
				Me._ImgLeafDate = value
				Me.SendPropertyChanged("ImgLeafDate")
				Me.OnImgLeafDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImgHerbRoot")>  _
Partial Public Class ImgHerbRoot
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImgRootID As String
	
	Private _HerbRootID As String
	
	Private _ImgRootname As String
	
	Private _ImgRoot As System.Data.Linq.Binary
	
	Private _ImgRootDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImgRootIDChanging(value As String)
    End Sub
    Partial Private Sub OnImgRootIDChanged()
    End Sub
    Partial Private Sub OnHerbRootIDChanging(value As String)
    End Sub
    Partial Private Sub OnHerbRootIDChanged()
    End Sub
    Partial Private Sub OnImgRootnameChanging(value As String)
    End Sub
    Partial Private Sub OnImgRootnameChanged()
    End Sub
    Partial Private Sub OnImgRootChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgRootChanged()
    End Sub
    Partial Private Sub OnImgRootDateChanging(value As Date)
    End Sub
    Partial Private Sub OnImgRootDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgRootID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ImgRootID() As String
		Get
			Return Me._ImgRootID
		End Get
		Set
			If (String.Equals(Me._ImgRootID, value) = false) Then
				Me.OnImgRootIDChanging(value)
				Me.SendPropertyChanging
				Me._ImgRootID = value
				Me.SendPropertyChanged("ImgRootID")
				Me.OnImgRootIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HerbRootID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HerbRootID() As String
		Get
			Return Me._HerbRootID
		End Get
		Set
			If (String.Equals(Me._HerbRootID, value) = false) Then
				Me.OnHerbRootIDChanging(value)
				Me.SendPropertyChanging
				Me._HerbRootID = value
				Me.SendPropertyChanged("HerbRootID")
				Me.OnHerbRootIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgRootname", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgRootname() As String
		Get
			Return Me._ImgRootname
		End Get
		Set
			If (String.Equals(Me._ImgRootname, value) = false) Then
				Me.OnImgRootnameChanging(value)
				Me.SendPropertyChanging
				Me._ImgRootname = value
				Me.SendPropertyChanged("ImgRootname")
				Me.OnImgRootnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgRoot", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgRoot() As System.Data.Linq.Binary
		Get
			Return Me._ImgRoot
		End Get
		Set
			If (Object.Equals(Me._ImgRoot, value) = false) Then
				Me.OnImgRootChanging(value)
				Me.SendPropertyChanging
				Me._ImgRoot = value
				Me.SendPropertyChanged("ImgRoot")
				Me.OnImgRootChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgRootDate", DbType:="Date NOT NULL")>  _
	Public Property ImgRootDate() As Date
		Get
			Return Me._ImgRootDate
		End Get
		Set
			If ((Me._ImgRootDate = value)  _
						= false) Then
				Me.OnImgRootDateChanging(value)
				Me.SendPropertyChanging
				Me._ImgRootDate = value
				Me.SendPropertyChanged("ImgRootDate")
				Me.OnImgRootDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImgHerbSeed")>  _
Partial Public Class ImgHerbSeed
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImgSeedID As String
	
	Private _HerbSeedID As String
	
	Private _ImgSeedname As String
	
	Private _ImgSeed As System.Data.Linq.Binary
	
	Private _ImgSeedDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImgSeedIDChanging(value As String)
    End Sub
    Partial Private Sub OnImgSeedIDChanged()
    End Sub
    Partial Private Sub OnHerbSeedIDChanging(value As String)
    End Sub
    Partial Private Sub OnHerbSeedIDChanged()
    End Sub
    Partial Private Sub OnImgSeednameChanging(value As String)
    End Sub
    Partial Private Sub OnImgSeednameChanged()
    End Sub
    Partial Private Sub OnImgSeedChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgSeedChanged()
    End Sub
    Partial Private Sub OnImgSeedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnImgSeedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgSeedID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ImgSeedID() As String
		Get
			Return Me._ImgSeedID
		End Get
		Set
			If (String.Equals(Me._ImgSeedID, value) = false) Then
				Me.OnImgSeedIDChanging(value)
				Me.SendPropertyChanging
				Me._ImgSeedID = value
				Me.SendPropertyChanged("ImgSeedID")
				Me.OnImgSeedIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HerbSeedID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HerbSeedID() As String
		Get
			Return Me._HerbSeedID
		End Get
		Set
			If (String.Equals(Me._HerbSeedID, value) = false) Then
				Me.OnHerbSeedIDChanging(value)
				Me.SendPropertyChanging
				Me._HerbSeedID = value
				Me.SendPropertyChanged("HerbSeedID")
				Me.OnHerbSeedIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgSeedname", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgSeedname() As String
		Get
			Return Me._ImgSeedname
		End Get
		Set
			If (String.Equals(Me._ImgSeedname, value) = false) Then
				Me.OnImgSeednameChanging(value)
				Me.SendPropertyChanging
				Me._ImgSeedname = value
				Me.SendPropertyChanged("ImgSeedname")
				Me.OnImgSeednameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgSeed", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgSeed() As System.Data.Linq.Binary
		Get
			Return Me._ImgSeed
		End Get
		Set
			If (Object.Equals(Me._ImgSeed, value) = false) Then
				Me.OnImgSeedChanging(value)
				Me.SendPropertyChanging
				Me._ImgSeed = value
				Me.SendPropertyChanged("ImgSeed")
				Me.OnImgSeedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgSeedDate", DbType:="Date NOT NULL")>  _
	Public Property ImgSeedDate() As Date
		Get
			Return Me._ImgSeedDate
		End Get
		Set
			If ((Me._ImgSeedDate = value)  _
						= false) Then
				Me.OnImgSeedDateChanging(value)
				Me.SendPropertyChanging
				Me._ImgSeedDate = value
				Me.SendPropertyChanged("ImgSeedDate")
				Me.OnImgSeedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImgHerbTrunk")>  _
Partial Public Class ImgHerbTrunk
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImgTrunkID As String
	
	Private _HerbTrunkID As String
	
	Private _ImgTrunkname As String
	
	Private _ImgTrunk As System.Data.Linq.Binary
	
	Private _ImgTrunkDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImgTrunkIDChanging(value As String)
    End Sub
    Partial Private Sub OnImgTrunkIDChanged()
    End Sub
    Partial Private Sub OnHerbTrunkIDChanging(value As String)
    End Sub
    Partial Private Sub OnHerbTrunkIDChanged()
    End Sub
    Partial Private Sub OnImgTrunknameChanging(value As String)
    End Sub
    Partial Private Sub OnImgTrunknameChanged()
    End Sub
    Partial Private Sub OnImgTrunkChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgTrunkChanged()
    End Sub
    Partial Private Sub OnImgTrunkDateChanging(value As Date)
    End Sub
    Partial Private Sub OnImgTrunkDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgTrunkID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ImgTrunkID() As String
		Get
			Return Me._ImgTrunkID
		End Get
		Set
			If (String.Equals(Me._ImgTrunkID, value) = false) Then
				Me.OnImgTrunkIDChanging(value)
				Me.SendPropertyChanging
				Me._ImgTrunkID = value
				Me.SendPropertyChanged("ImgTrunkID")
				Me.OnImgTrunkIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HerbTrunkID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property HerbTrunkID() As String
		Get
			Return Me._HerbTrunkID
		End Get
		Set
			If (String.Equals(Me._HerbTrunkID, value) = false) Then
				Me.OnHerbTrunkIDChanging(value)
				Me.SendPropertyChanging
				Me._HerbTrunkID = value
				Me.SendPropertyChanged("HerbTrunkID")
				Me.OnHerbTrunkIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgTrunkname", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgTrunkname() As String
		Get
			Return Me._ImgTrunkname
		End Get
		Set
			If (String.Equals(Me._ImgTrunkname, value) = false) Then
				Me.OnImgTrunknameChanging(value)
				Me.SendPropertyChanging
				Me._ImgTrunkname = value
				Me.SendPropertyChanged("ImgTrunkname")
				Me.OnImgTrunknameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgTrunk", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgTrunk() As System.Data.Linq.Binary
		Get
			Return Me._ImgTrunk
		End Get
		Set
			If (Object.Equals(Me._ImgTrunk, value) = false) Then
				Me.OnImgTrunkChanging(value)
				Me.SendPropertyChanging
				Me._ImgTrunk = value
				Me.SendPropertyChanged("ImgTrunk")
				Me.OnImgTrunkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgTrunkDate", DbType:="Date NOT NULL")>  _
	Public Property ImgTrunkDate() As Date
		Get
			Return Me._ImgTrunkDate
		End Get
		Set
			If ((Me._ImgTrunkDate = value)  _
						= false) Then
				Me.OnImgTrunkDateChanging(value)
				Me.SendPropertyChanging
				Me._ImgTrunkDate = value
				Me.SendPropertyChanged("ImgTrunkDate")
				Me.OnImgTrunkDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImgInfo")>  _
Partial Public Class ImgInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImgInfoID As String
	
	Private _InfopicID As String
	
	Private _ImgInfoname As String
	
	Private _ImgInfo As System.Data.Linq.Binary
	
	Private _ImgInfoDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImgInfoIDChanging(value As String)
    End Sub
    Partial Private Sub OnImgInfoIDChanged()
    End Sub
    Partial Private Sub OnInfopicIDChanging(value As String)
    End Sub
    Partial Private Sub OnInfopicIDChanged()
    End Sub
    Partial Private Sub OnImgInfonameChanging(value As String)
    End Sub
    Partial Private Sub OnImgInfonameChanged()
    End Sub
    Partial Private Sub OnImgInfoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnImgInfoChanged()
    End Sub
    Partial Private Sub OnImgInfoDateChanging(value As Date)
    End Sub
    Partial Private Sub OnImgInfoDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgInfoID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ImgInfoID() As String
		Get
			Return Me._ImgInfoID
		End Get
		Set
			If (String.Equals(Me._ImgInfoID, value) = false) Then
				Me.OnImgInfoIDChanging(value)
				Me.SendPropertyChanging
				Me._ImgInfoID = value
				Me.SendPropertyChanged("ImgInfoID")
				Me.OnImgInfoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InfopicID", DbType:="VarChar(50)")>  _
	Public Property InfopicID() As String
		Get
			Return Me._InfopicID
		End Get
		Set
			If (String.Equals(Me._InfopicID, value) = false) Then
				Me.OnInfopicIDChanging(value)
				Me.SendPropertyChanging
				Me._InfopicID = value
				Me.SendPropertyChanged("InfopicID")
				Me.OnInfopicIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgInfoname", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgInfoname() As String
		Get
			Return Me._ImgInfoname
		End Get
		Set
			If (String.Equals(Me._ImgInfoname, value) = false) Then
				Me.OnImgInfonameChanging(value)
				Me.SendPropertyChanging
				Me._ImgInfoname = value
				Me.SendPropertyChanged("ImgInfoname")
				Me.OnImgInfonameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgInfo", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ImgInfo() As System.Data.Linq.Binary
		Get
			Return Me._ImgInfo
		End Get
		Set
			If (Object.Equals(Me._ImgInfo, value) = false) Then
				Me.OnImgInfoChanging(value)
				Me.SendPropertyChanging
				Me._ImgInfo = value
				Me.SendPropertyChanged("ImgInfo")
				Me.OnImgInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImgInfoDate", DbType:="Date NOT NULL")>  _
	Public Property ImgInfoDate() As Date
		Get
			Return Me._ImgInfoDate
		End Get
		Set
			If ((Me._ImgInfoDate = value)  _
						= false) Then
				Me.OnImgInfoDateChanging(value)
				Me.SendPropertyChanging
				Me._ImgInfoDate = value
				Me.SendPropertyChanged("ImgInfoDate")
				Me.OnImgInfoDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Infographic")>  _
Partial Public Class Infographic
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _infoID As String
	
	Private _infoName As String
	
	Private _creditInfo As String
	
	Private _dateInfo As Date
	
	Private _InfographicRatings As EntitySet(Of InfographicRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OninfoIDChanging(value As String)
    End Sub
    Partial Private Sub OninfoIDChanged()
    End Sub
    Partial Private Sub OninfoNameChanging(value As String)
    End Sub
    Partial Private Sub OninfoNameChanged()
    End Sub
    Partial Private Sub OncreditInfoChanging(value As String)
    End Sub
    Partial Private Sub OncreditInfoChanged()
    End Sub
    Partial Private Sub OndateInfoChanging(value As Date)
    End Sub
    Partial Private Sub OndateInfoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._InfographicRatings = New EntitySet(Of InfographicRating)(AddressOf Me.attach_InfographicRatings, AddressOf Me.detach_InfographicRatings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_infoID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property infoID() As String
		Get
			Return Me._infoID
		End Get
		Set
			If (String.Equals(Me._infoID, value) = false) Then
				Me.OninfoIDChanging(value)
				Me.SendPropertyChanging
				Me._infoID = value
				Me.SendPropertyChanged("infoID")
				Me.OninfoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_infoName", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property infoName() As String
		Get
			Return Me._infoName
		End Get
		Set
			If (String.Equals(Me._infoName, value) = false) Then
				Me.OninfoNameChanging(value)
				Me.SendPropertyChanging
				Me._infoName = value
				Me.SendPropertyChanged("infoName")
				Me.OninfoNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creditInfo", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property creditInfo() As String
		Get
			Return Me._creditInfo
		End Get
		Set
			If (String.Equals(Me._creditInfo, value) = false) Then
				Me.OncreditInfoChanging(value)
				Me.SendPropertyChanging
				Me._creditInfo = value
				Me.SendPropertyChanged("creditInfo")
				Me.OncreditInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateInfo", DbType:="Date NOT NULL")>  _
	Public Property dateInfo() As Date
		Get
			Return Me._dateInfo
		End Get
		Set
			If ((Me._dateInfo = value)  _
						= false) Then
				Me.OndateInfoChanging(value)
				Me.SendPropertyChanging
				Me._dateInfo = value
				Me.SendPropertyChanged("dateInfo")
				Me.OndateInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Infographic_InfographicRating", Storage:="_InfographicRatings", ThisKey:="infoID", OtherKey:="infoID")>  _
	Public Property InfographicRatings() As EntitySet(Of InfographicRating)
		Get
			Return Me._InfographicRatings
		End Get
		Set
			Me._InfographicRatings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_InfographicRatings(ByVal entity As InfographicRating)
		Me.SendPropertyChanging
		entity.Infographic = Me
	End Sub
	
	Private Sub detach_InfographicRatings(ByVal entity As InfographicRating)
		Me.SendPropertyChanging
		entity.Infographic = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.InfographicRating")>  _
Partial Public Class InfographicRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _infoRatID As String
	
	Private _ratingInfo As Double
	
	Private _infoID As String
	
	Private _usernameInfo As String
	
	Private _Infographic As EntityRef(Of Infographic)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OninfoRatIDChanging(value As String)
    End Sub
    Partial Private Sub OninfoRatIDChanged()
    End Sub
    Partial Private Sub OnratingInfoChanging(value As Double)
    End Sub
    Partial Private Sub OnratingInfoChanged()
    End Sub
    Partial Private Sub OninfoIDChanging(value As String)
    End Sub
    Partial Private Sub OninfoIDChanged()
    End Sub
    Partial Private Sub OnusernameInfoChanging(value As String)
    End Sub
    Partial Private Sub OnusernameInfoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Infographic = CType(Nothing, EntityRef(Of Infographic))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_infoRatID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property infoRatID() As String
		Get
			Return Me._infoRatID
		End Get
		Set
			If (String.Equals(Me._infoRatID, value) = false) Then
				Me.OninfoRatIDChanging(value)
				Me.SendPropertyChanging
				Me._infoRatID = value
				Me.SendPropertyChanged("infoRatID")
				Me.OninfoRatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ratingInfo", DbType:="Float NOT NULL")>  _
	Public Property ratingInfo() As Double
		Get
			Return Me._ratingInfo
		End Get
		Set
			If ((Me._ratingInfo = value)  _
						= false) Then
				Me.OnratingInfoChanging(value)
				Me.SendPropertyChanging
				Me._ratingInfo = value
				Me.SendPropertyChanged("ratingInfo")
				Me.OnratingInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_infoID", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property infoID() As String
		Get
			Return Me._infoID
		End Get
		Set
			If (String.Equals(Me._infoID, value) = false) Then
				If Me._Infographic.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OninfoIDChanging(value)
				Me.SendPropertyChanging
				Me._infoID = value
				Me.SendPropertyChanged("infoID")
				Me.OninfoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usernameInfo", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property usernameInfo() As String
		Get
			Return Me._usernameInfo
		End Get
		Set
			If (String.Equals(Me._usernameInfo, value) = false) Then
				Me.OnusernameInfoChanging(value)
				Me.SendPropertyChanging
				Me._usernameInfo = value
				Me.SendPropertyChanged("usernameInfo")
				Me.OnusernameInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Infographic_InfographicRating", Storage:="_Infographic", ThisKey:="infoID", OtherKey:="infoID", IsForeignKey:=true)>  _
	Public Property Infographic() As Infographic
		Get
			Return Me._Infographic.Entity
		End Get
		Set
			Dim previousValue As Infographic = Me._Infographic.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Infographic.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Infographic.Entity = Nothing
					previousValue.InfographicRatings.Remove(Me)
				End If
				Me._Infographic.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InfographicRatings.Add(Me)
					Me._infoID = value.infoID
				Else
					Me._infoID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Infographic")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Pharmacist")>  _
Partial Public Class Pharmacist
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _username As String
	
	Private _password As String
	
	Private _email As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
