'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SocialHerb")>  _
Partial Public Class SocialHerbDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAdmin(instance As Admin)
    End Sub
  Partial Private Sub UpdateAdmin(instance As Admin)
    End Sub
  Partial Private Sub DeleteAdmin(instance As Admin)
    End Sub
  Partial Private Sub InsertArticle(instance As Article)
    End Sub
  Partial Private Sub UpdateArticle(instance As Article)
    End Sub
  Partial Private Sub DeleteArticle(instance As Article)
    End Sub
  Partial Private Sub InsertArticleRating(instance As ArticleRating)
    End Sub
  Partial Private Sub UpdateArticleRating(instance As ArticleRating)
    End Sub
  Partial Private Sub DeleteArticleRating(instance As ArticleRating)
    End Sub
  Partial Private Sub InsertDisease(instance As Disease)
    End Sub
  Partial Private Sub UpdateDisease(instance As Disease)
    End Sub
  Partial Private Sub DeleteDisease(instance As Disease)
    End Sub
  Partial Private Sub InsertDiseaseRating(instance As DiseaseRating)
    End Sub
  Partial Private Sub UpdateDiseaseRating(instance As DiseaseRating)
    End Sub
  Partial Private Sub DeleteDiseaseRating(instance As DiseaseRating)
    End Sub
  Partial Private Sub InsertHerb(instance As Herb)
    End Sub
  Partial Private Sub UpdateHerb(instance As Herb)
    End Sub
  Partial Private Sub DeleteHerb(instance As Herb)
    End Sub
  Partial Private Sub InsertHerbComment(instance As HerbComment)
    End Sub
  Partial Private Sub UpdateHerbComment(instance As HerbComment)
    End Sub
  Partial Private Sub DeleteHerbComment(instance As HerbComment)
    End Sub
  Partial Private Sub InsertHerbImg(instance As HerbImg)
    End Sub
  Partial Private Sub UpdateHerbImg(instance As HerbImg)
    End Sub
  Partial Private Sub DeleteHerbImg(instance As HerbImg)
    End Sub
  Partial Private Sub InsertHerbRating(instance As HerbRating)
    End Sub
  Partial Private Sub UpdateHerbRating(instance As HerbRating)
    End Sub
  Partial Private Sub DeleteHerbRating(instance As HerbRating)
    End Sub
  Partial Private Sub InsertHerbResearch(instance As HerbResearch)
    End Sub
  Partial Private Sub UpdateHerbResearch(instance As HerbResearch)
    End Sub
  Partial Private Sub DeleteHerbResearch(instance As HerbResearch)
    End Sub
  Partial Private Sub InsertInfographic(instance As Infographic)
    End Sub
  Partial Private Sub UpdateInfographic(instance As Infographic)
    End Sub
  Partial Private Sub DeleteInfographic(instance As Infographic)
    End Sub
  Partial Private Sub InsertInfographicRating(instance As InfographicRating)
    End Sub
  Partial Private Sub UpdateInfographicRating(instance As InfographicRating)
    End Sub
  Partial Private Sub DeleteInfographicRating(instance As InfographicRating)
    End Sub
  Partial Private Sub InsertPharmacist(instance As Pharmacist)
    End Sub
  Partial Private Sub UpdatePharmacist(instance As Pharmacist)
    End Sub
  Partial Private Sub DeletePharmacist(instance As Pharmacist)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SocialHerb").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Admins() As System.Data.Linq.Table(Of Admin)
		Get
			Return Me.GetTable(Of Admin)
		End Get
	End Property
	
	Public ReadOnly Property Articles() As System.Data.Linq.Table(Of Article)
		Get
			Return Me.GetTable(Of Article)
		End Get
	End Property
	
	Public ReadOnly Property ArticleRatings() As System.Data.Linq.Table(Of ArticleRating)
		Get
			Return Me.GetTable(Of ArticleRating)
		End Get
	End Property
	
	Public ReadOnly Property Departments() As System.Data.Linq.Table(Of Department)
		Get
			Return Me.GetTable(Of Department)
		End Get
	End Property
	
	Public ReadOnly Property Diseases() As System.Data.Linq.Table(Of Disease)
		Get
			Return Me.GetTable(Of Disease)
		End Get
	End Property
	
	Public ReadOnly Property DiseaseRatings() As System.Data.Linq.Table(Of DiseaseRating)
		Get
			Return Me.GetTable(Of DiseaseRating)
		End Get
	End Property
	
	Public ReadOnly Property Foods() As System.Data.Linq.Table(Of Food)
		Get
			Return Me.GetTable(Of Food)
		End Get
	End Property
	
	Public ReadOnly Property Herbs() As System.Data.Linq.Table(Of Herb)
		Get
			Return Me.GetTable(Of Herb)
		End Get
	End Property
	
	Public ReadOnly Property HerbComments() As System.Data.Linq.Table(Of HerbComment)
		Get
			Return Me.GetTable(Of HerbComment)
		End Get
	End Property
	
	Public ReadOnly Property HerbImgs() As System.Data.Linq.Table(Of HerbImg)
		Get
			Return Me.GetTable(Of HerbImg)
		End Get
	End Property
	
	Public ReadOnly Property HerbRatings() As System.Data.Linq.Table(Of HerbRating)
		Get
			Return Me.GetTable(Of HerbRating)
		End Get
	End Property
	
	Public ReadOnly Property HerbResearches() As System.Data.Linq.Table(Of HerbResearch)
		Get
			Return Me.GetTable(Of HerbResearch)
		End Get
	End Property
	
	Public ReadOnly Property Infographics() As System.Data.Linq.Table(Of Infographic)
		Get
			Return Me.GetTable(Of Infographic)
		End Get
	End Property
	
	Public ReadOnly Property InfographicRatings() As System.Data.Linq.Table(Of InfographicRating)
		Get
			Return Me.GetTable(Of InfographicRating)
		End Get
	End Property
	
	Public ReadOnly Property Pharmacists() As System.Data.Linq.Table(Of Pharmacist)
		Get
			Return Me.GetTable(Of Pharmacist)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Admin")>  _
Partial Public Class Admin
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _usernameAd As String
	
	Private _passwordAd As String
	
	Private _encrypPassAd As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameAdChanging(value As String)
    End Sub
    Partial Private Sub OnusernameAdChanged()
    End Sub
    Partial Private Sub OnpasswordAdChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordAdChanged()
    End Sub
    Partial Private Sub OnencrypPassAdChanging(value As String)
    End Sub
    Partial Private Sub OnencrypPassAdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_usernameAd", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property usernameAd() As String
		Get
			Return Me._usernameAd
		End Get
		Set
			If (String.Equals(Me._usernameAd, value) = false) Then
				Me.OnusernameAdChanging(value)
				Me.SendPropertyChanging
				Me._usernameAd = value
				Me.SendPropertyChanged("usernameAd")
				Me.OnusernameAdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_passwordAd", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property passwordAd() As String
		Get
			Return Me._passwordAd
		End Get
		Set
			If (String.Equals(Me._passwordAd, value) = false) Then
				Me.OnpasswordAdChanging(value)
				Me.SendPropertyChanging
				Me._passwordAd = value
				Me.SendPropertyChanged("passwordAd")
				Me.OnpasswordAdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_encrypPassAd", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property encrypPassAd() As String
		Get
			Return Me._encrypPassAd
		End Get
		Set
			If (String.Equals(Me._encrypPassAd, value) = false) Then
				Me.OnencrypPassAdChanging(value)
				Me.SendPropertyChanging
				Me._encrypPassAd = value
				Me.SendPropertyChanged("encrypPassAd")
				Me.OnencrypPassAdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Article")>  _
Partial Public Class Article
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _articleID As String
	
	Private _articleName As String
	
	Private _articleImg As System.Data.Linq.Binary
	
	Private _article As String
	
	Private _creditArt As String
	
	Private _dateArticle As Date
	
	Private _ArticleRatings As EntitySet(Of ArticleRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnarticleIDChanging(value As String)
    End Sub
    Partial Private Sub OnarticleIDChanged()
    End Sub
    Partial Private Sub OnarticleNameChanging(value As String)
    End Sub
    Partial Private Sub OnarticleNameChanged()
    End Sub
    Partial Private Sub OnarticleImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnarticleImgChanged()
    End Sub
    Partial Private Sub OnarticleChanging(value As String)
    End Sub
    Partial Private Sub OnarticleChanged()
    End Sub
    Partial Private Sub OncreditArtChanging(value As String)
    End Sub
    Partial Private Sub OncreditArtChanged()
    End Sub
    Partial Private Sub OndateArticleChanging(value As Date)
    End Sub
    Partial Private Sub OndateArticleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ArticleRatings = New EntitySet(Of ArticleRating)(AddressOf Me.attach_ArticleRatings, AddressOf Me.detach_ArticleRatings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property articleID() As String
		Get
			Return Me._articleID
		End Get
		Set
			If (String.Equals(Me._articleID, value) = false) Then
				Me.OnarticleIDChanging(value)
				Me.SendPropertyChanging
				Me._articleID = value
				Me.SendPropertyChanged("articleID")
				Me.OnarticleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property articleName() As String
		Get
			Return Me._articleName
		End Get
		Set
			If (String.Equals(Me._articleName, value) = false) Then
				Me.OnarticleNameChanging(value)
				Me.SendPropertyChanging
				Me._articleName = value
				Me.SendPropertyChanged("articleName")
				Me.OnarticleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleImg", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property articleImg() As System.Data.Linq.Binary
		Get
			Return Me._articleImg
		End Get
		Set
			If (Object.Equals(Me._articleImg, value) = false) Then
				Me.OnarticleImgChanging(value)
				Me.SendPropertyChanging
				Me._articleImg = value
				Me.SendPropertyChanged("articleImg")
				Me.OnarticleImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_article", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property article() As String
		Get
			Return Me._article
		End Get
		Set
			If (String.Equals(Me._article, value) = false) Then
				Me.OnarticleChanging(value)
				Me.SendPropertyChanging
				Me._article = value
				Me.SendPropertyChanged("article")
				Me.OnarticleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creditArt", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property creditArt() As String
		Get
			Return Me._creditArt
		End Get
		Set
			If (String.Equals(Me._creditArt, value) = false) Then
				Me.OncreditArtChanging(value)
				Me.SendPropertyChanging
				Me._creditArt = value
				Me.SendPropertyChanged("creditArt")
				Me.OncreditArtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateArticle", DbType:="Date NOT NULL")>  _
	Public Property dateArticle() As Date
		Get
			Return Me._dateArticle
		End Get
		Set
			If ((Me._dateArticle = value)  _
						= false) Then
				Me.OndateArticleChanging(value)
				Me.SendPropertyChanging
				Me._dateArticle = value
				Me.SendPropertyChanged("dateArticle")
				Me.OndateArticleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_ArticleRating", Storage:="_ArticleRatings", ThisKey:="articleID", OtherKey:="articleID")>  _
	Public Property ArticleRatings() As EntitySet(Of ArticleRating)
		Get
			Return Me._ArticleRatings
		End Get
		Set
			Me._ArticleRatings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ArticleRatings(ByVal entity As ArticleRating)
		Me.SendPropertyChanging
		entity.Article = Me
	End Sub
	
	Private Sub detach_ArticleRatings(ByVal entity As ArticleRating)
		Me.SendPropertyChanging
		entity.Article = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ArticleRating")>  _
Partial Public Class ArticleRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _artRatingID As String
	
	Private _ratingArt As Double
	
	Private _articleID As String
	
	Private _username As String
	
	Private _Article As EntityRef(Of Article)
	
	Private _Pharmacist As EntityRef(Of Pharmacist)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnartRatingIDChanging(value As String)
    End Sub
    Partial Private Sub OnartRatingIDChanged()
    End Sub
    Partial Private Sub OnratingArtChanging(value As Double)
    End Sub
    Partial Private Sub OnratingArtChanged()
    End Sub
    Partial Private Sub OnarticleIDChanging(value As String)
    End Sub
    Partial Private Sub OnarticleIDChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Article = CType(Nothing, EntityRef(Of Article))
		Me._Pharmacist = CType(Nothing, EntityRef(Of Pharmacist))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_artRatingID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property artRatingID() As String
		Get
			Return Me._artRatingID
		End Get
		Set
			If (String.Equals(Me._artRatingID, value) = false) Then
				Me.OnartRatingIDChanging(value)
				Me.SendPropertyChanging
				Me._artRatingID = value
				Me.SendPropertyChanged("artRatingID")
				Me.OnartRatingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ratingArt", DbType:="Float NOT NULL")>  _
	Public Property ratingArt() As Double
		Get
			Return Me._ratingArt
		End Get
		Set
			If ((Me._ratingArt = value)  _
						= false) Then
				Me.OnratingArtChanging(value)
				Me.SendPropertyChanging
				Me._ratingArt = value
				Me.SendPropertyChanged("ratingArt")
				Me.OnratingArtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_articleID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property articleID() As String
		Get
			Return Me._articleID
		End Get
		Set
			If (String.Equals(Me._articleID, value) = false) Then
				If Me._Article.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnarticleIDChanging(value)
				Me.SendPropertyChanging
				Me._articleID = value
				Me.SendPropertyChanged("articleID")
				Me.OnarticleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				If Me._Pharmacist.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Article_ArticleRating", Storage:="_Article", ThisKey:="articleID", OtherKey:="articleID", IsForeignKey:=true)>  _
	Public Property Article() As Article
		Get
			Return Me._Article.Entity
		End Get
		Set
			Dim previousValue As Article = Me._Article.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Article.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Article.Entity = Nothing
					previousValue.ArticleRatings.Remove(Me)
				End If
				Me._Article.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ArticleRatings.Add(Me)
					Me._articleID = value.articleID
				Else
					Me._articleID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Article")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pharmacist_ArticleRating", Storage:="_Pharmacist", ThisKey:="username", OtherKey:="username", IsForeignKey:=true)>  _
	Public Property Pharmacist() As Pharmacist
		Get
			Return Me._Pharmacist.Entity
		End Get
		Set
			Dim previousValue As Pharmacist = Me._Pharmacist.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pharmacist.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pharmacist.Entity = Nothing
					previousValue.ArticleRatings.Remove(Me)
				End If
				Me._Pharmacist.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ArticleRatings.Add(Me)
					Me._username = value.username
				Else
					Me._username = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Pharmacist")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Department")>  _
Partial Public Class Department
	
	Private _DepartmentName As String
	
	Private _Address As String
	
	Private _Tel As String
	
	Private _Fax As String
	
	Private _Email As String
	
	Private _Role As String
	
	Private _Website As String
	
	Private _DepartDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartmentName", DbType:="NVarChar(50)")>  _
	Public Property DepartmentName() As String
		Get
			Return Me._DepartmentName
		End Get
		Set
			If (String.Equals(Me._DepartmentName, value) = false) Then
				Me._DepartmentName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me._Address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tel", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Tel() As String
		Get
			Return Me._Tel
		End Get
		Set
			If (String.Equals(Me._Tel, value) = false) Then
				Me._Tel = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me._Fax = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Role", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Role() As String
		Get
			Return Me._Role
		End Get
		Set
			If (String.Equals(Me._Role, value) = false) Then
				Me._Role = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Website", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Website() As String
		Get
			Return Me._Website
		End Get
		Set
			If (String.Equals(Me._Website, value) = false) Then
				Me._Website = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DepartDate", DbType:="Date")>  _
	Public Property DepartDate() As System.Nullable(Of Date)
		Get
			Return Me._DepartDate
		End Get
		Set
			If (Me._DepartDate.Equals(value) = false) Then
				Me._DepartDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Disease")>  _
Partial Public Class Disease
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _diseaseID As String
	
	Private _symptom As String
	
	Private _howtoRelief As String
	
	Private _herb As String
	
	Private _dateDisease As System.Nullable(Of Date)
	
	Private _DiseaseRatings As EntitySet(Of DiseaseRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OndiseaseIDChanging(value As String)
    End Sub
    Partial Private Sub OndiseaseIDChanged()
    End Sub
    Partial Private Sub OnsymptomChanging(value As String)
    End Sub
    Partial Private Sub OnsymptomChanged()
    End Sub
    Partial Private Sub OnhowtoReliefChanging(value As String)
    End Sub
    Partial Private Sub OnhowtoReliefChanged()
    End Sub
    Partial Private Sub OnherbChanging(value As String)
    End Sub
    Partial Private Sub OnherbChanged()
    End Sub
    Partial Private Sub OndateDiseaseChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndateDiseaseChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DiseaseRatings = New EntitySet(Of DiseaseRating)(AddressOf Me.attach_DiseaseRatings, AddressOf Me.detach_DiseaseRatings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_diseaseID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property diseaseID() As String
		Get
			Return Me._diseaseID
		End Get
		Set
			If (String.Equals(Me._diseaseID, value) = false) Then
				Me.OndiseaseIDChanging(value)
				Me.SendPropertyChanging
				Me._diseaseID = value
				Me.SendPropertyChanged("diseaseID")
				Me.OndiseaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_symptom", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property symptom() As String
		Get
			Return Me._symptom
		End Get
		Set
			If (String.Equals(Me._symptom, value) = false) Then
				Me.OnsymptomChanging(value)
				Me.SendPropertyChanging
				Me._symptom = value
				Me.SendPropertyChanged("symptom")
				Me.OnsymptomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_howtoRelief", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property howtoRelief() As String
		Get
			Return Me._howtoRelief
		End Get
		Set
			If (String.Equals(Me._howtoRelief, value) = false) Then
				Me.OnhowtoReliefChanging(value)
				Me.SendPropertyChanging
				Me._howtoRelief = value
				Me.SendPropertyChanged("howtoRelief")
				Me.OnhowtoReliefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herb", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property herb() As String
		Get
			Return Me._herb
		End Get
		Set
			If (String.Equals(Me._herb, value) = false) Then
				Me.OnherbChanging(value)
				Me.SendPropertyChanging
				Me._herb = value
				Me.SendPropertyChanged("herb")
				Me.OnherbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateDisease", DbType:="Date")>  _
	Public Property dateDisease() As System.Nullable(Of Date)
		Get
			Return Me._dateDisease
		End Get
		Set
			If (Me._dateDisease.Equals(value) = false) Then
				Me.OndateDiseaseChanging(value)
				Me.SendPropertyChanging
				Me._dateDisease = value
				Me.SendPropertyChanged("dateDisease")
				Me.OndateDiseaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Disease_DiseaseRating", Storage:="_DiseaseRatings", ThisKey:="diseaseID", OtherKey:="diseaseID")>  _
	Public Property DiseaseRatings() As EntitySet(Of DiseaseRating)
		Get
			Return Me._DiseaseRatings
		End Get
		Set
			Me._DiseaseRatings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DiseaseRatings(ByVal entity As DiseaseRating)
		Me.SendPropertyChanging
		entity.Disease = Me
	End Sub
	
	Private Sub detach_DiseaseRatings(ByVal entity As DiseaseRating)
		Me.SendPropertyChanging
		entity.Disease = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DiseaseRating")>  _
Partial Public Class DiseaseRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _diRatingID As String
	
	Private _ratingDi As Double
	
	Private _diseaseID As String
	
	Private _username As String
	
	Private _Disease As EntityRef(Of Disease)
	
	Private _Pharmacist As EntityRef(Of Pharmacist)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OndiRatingIDChanging(value As String)
    End Sub
    Partial Private Sub OndiRatingIDChanged()
    End Sub
    Partial Private Sub OnratingDiChanging(value As Double)
    End Sub
    Partial Private Sub OnratingDiChanged()
    End Sub
    Partial Private Sub OndiseaseIDChanging(value As String)
    End Sub
    Partial Private Sub OndiseaseIDChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Disease = CType(Nothing, EntityRef(Of Disease))
		Me._Pharmacist = CType(Nothing, EntityRef(Of Pharmacist))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_diRatingID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property diRatingID() As String
		Get
			Return Me._diRatingID
		End Get
		Set
			If (String.Equals(Me._diRatingID, value) = false) Then
				Me.OndiRatingIDChanging(value)
				Me.SendPropertyChanging
				Me._diRatingID = value
				Me.SendPropertyChanged("diRatingID")
				Me.OndiRatingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ratingDi", DbType:="Float NOT NULL")>  _
	Public Property ratingDi() As Double
		Get
			Return Me._ratingDi
		End Get
		Set
			If ((Me._ratingDi = value)  _
						= false) Then
				Me.OnratingDiChanging(value)
				Me.SendPropertyChanging
				Me._ratingDi = value
				Me.SendPropertyChanged("ratingDi")
				Me.OnratingDiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_diseaseID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property diseaseID() As String
		Get
			Return Me._diseaseID
		End Get
		Set
			If (String.Equals(Me._diseaseID, value) = false) Then
				If Me._Disease.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OndiseaseIDChanging(value)
				Me.SendPropertyChanging
				Me._diseaseID = value
				Me.SendPropertyChanged("diseaseID")
				Me.OndiseaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				If Me._Pharmacist.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Disease_DiseaseRating", Storage:="_Disease", ThisKey:="diseaseID", OtherKey:="diseaseID", IsForeignKey:=true)>  _
	Public Property Disease() As Disease
		Get
			Return Me._Disease.Entity
		End Get
		Set
			Dim previousValue As Disease = Me._Disease.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Disease.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Disease.Entity = Nothing
					previousValue.DiseaseRatings.Remove(Me)
				End If
				Me._Disease.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DiseaseRatings.Add(Me)
					Me._diseaseID = value.diseaseID
				Else
					Me._diseaseID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Disease")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pharmacist_DiseaseRating", Storage:="_Pharmacist", ThisKey:="username", OtherKey:="username", IsForeignKey:=true)>  _
	Public Property Pharmacist() As Pharmacist
		Get
			Return Me._Pharmacist.Entity
		End Get
		Set
			Dim previousValue As Pharmacist = Me._Pharmacist.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pharmacist.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pharmacist.Entity = Nothing
					previousValue.DiseaseRatings.Remove(Me)
				End If
				Me._Pharmacist.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DiseaseRatings.Add(Me)
					Me._username = value.username
				Else
					Me._username = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Pharmacist")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Food")>  _
Partial Public Class Food
	
	Private _FoodName As String
	
	Private _FoodPic As System.Data.Linq.Binary
	
	Private _Cooking As String
	
	Private _Ingredient As String
	
	Private _Benefit As String
	
	Private _Ref As String
	
	Private _FoodDate As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FoodName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FoodName() As String
		Get
			Return Me._FoodName
		End Get
		Set
			If (String.Equals(Me._FoodName, value) = false) Then
				Me._FoodName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FoodPic", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property FoodPic() As System.Data.Linq.Binary
		Get
			Return Me._FoodPic
		End Get
		Set
			If (Object.Equals(Me._FoodPic, value) = false) Then
				Me._FoodPic = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cooking", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Cooking() As String
		Get
			Return Me._Cooking
		End Get
		Set
			If (String.Equals(Me._Cooking, value) = false) Then
				Me._Cooking = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ingredient", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Ingredient() As String
		Get
			Return Me._Ingredient
		End Get
		Set
			If (String.Equals(Me._Ingredient, value) = false) Then
				Me._Ingredient = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Benefit", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Benefit() As String
		Get
			Return Me._Benefit
		End Get
		Set
			If (String.Equals(Me._Benefit, value) = false) Then
				Me._Benefit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ref", DbType:="NVarChar(50)")>  _
	Public Property Ref() As String
		Get
			Return Me._Ref
		End Get
		Set
			If (String.Equals(Me._Ref, value) = false) Then
				Me._Ref = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FoodDate", DbType:="Date")>  _
	Public Property FoodDate() As System.Nullable(Of Date)
		Get
			Return Me._FoodDate
		End Get
		Set
			If (Me._FoodDate.Equals(value) = false) Then
				Me._FoodDate = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Herb")>  _
Partial Public Class Herb
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _herbID As String
	
	Private _herbName As String
	
	Private _herbOtherName As String
	
	Private _img As System.Data.Linq.Binary
	
	Private _howto As String
	
	Private _warning As String
	
	Private _properties As String
	
	Private _dateHerb As Date
	
	Private _HerbComments As EntitySet(Of HerbComment)
	
	Private _HerbImgs As EntitySet(Of HerbImg)
	
	Private _HerbRatings As EntitySet(Of HerbRating)
	
	Private _HerbResearches As EntitySet(Of HerbResearch)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnherbIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbIDChanged()
    End Sub
    Partial Private Sub OnherbNameChanging(value As String)
    End Sub
    Partial Private Sub OnherbNameChanged()
    End Sub
    Partial Private Sub OnherbOtherNameChanging(value As String)
    End Sub
    Partial Private Sub OnherbOtherNameChanged()
    End Sub
    Partial Private Sub OnimgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnimgChanged()
    End Sub
    Partial Private Sub OnhowtoChanging(value As String)
    End Sub
    Partial Private Sub OnhowtoChanged()
    End Sub
    Partial Private Sub OnwarningChanging(value As String)
    End Sub
    Partial Private Sub OnwarningChanged()
    End Sub
    Partial Private Sub OnpropertiesChanging(value As String)
    End Sub
    Partial Private Sub OnpropertiesChanged()
    End Sub
    Partial Private Sub OndateHerbChanging(value As Date)
    End Sub
    Partial Private Sub OndateHerbChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HerbComments = New EntitySet(Of HerbComment)(AddressOf Me.attach_HerbComments, AddressOf Me.detach_HerbComments)
		Me._HerbImgs = New EntitySet(Of HerbImg)(AddressOf Me.attach_HerbImgs, AddressOf Me.detach_HerbImgs)
		Me._HerbRatings = New EntitySet(Of HerbRating)(AddressOf Me.attach_HerbRatings, AddressOf Me.detach_HerbRatings)
		Me._HerbResearches = New EntitySet(Of HerbResearch)(AddressOf Me.attach_HerbResearches, AddressOf Me.detach_HerbResearches)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property herbID() As String
		Get
			Return Me._herbID
		End Get
		Set
			If (String.Equals(Me._herbID, value) = false) Then
				Me.OnherbIDChanging(value)
				Me.SendPropertyChanging
				Me._herbID = value
				Me.SendPropertyChanged("herbID")
				Me.OnherbIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbName", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property herbName() As String
		Get
			Return Me._herbName
		End Get
		Set
			If (String.Equals(Me._herbName, value) = false) Then
				Me.OnherbNameChanging(value)
				Me.SendPropertyChanging
				Me._herbName = value
				Me.SendPropertyChanged("herbName")
				Me.OnherbNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbOtherName", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property herbOtherName() As String
		Get
			Return Me._herbOtherName
		End Get
		Set
			If (String.Equals(Me._herbOtherName, value) = false) Then
				Me.OnherbOtherNameChanging(value)
				Me.SendPropertyChanging
				Me._herbOtherName = value
				Me.SendPropertyChanged("herbOtherName")
				Me.OnherbOtherNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_img", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property img() As System.Data.Linq.Binary
		Get
			Return Me._img
		End Get
		Set
			If (Object.Equals(Me._img, value) = false) Then
				Me.OnimgChanging(value)
				Me.SendPropertyChanging
				Me._img = value
				Me.SendPropertyChanged("img")
				Me.OnimgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_howto", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property howto() As String
		Get
			Return Me._howto
		End Get
		Set
			If (String.Equals(Me._howto, value) = false) Then
				Me.OnhowtoChanging(value)
				Me.SendPropertyChanging
				Me._howto = value
				Me.SendPropertyChanged("howto")
				Me.OnhowtoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_warning", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property warning() As String
		Get
			Return Me._warning
		End Get
		Set
			If (String.Equals(Me._warning, value) = false) Then
				Me.OnwarningChanging(value)
				Me.SendPropertyChanging
				Me._warning = value
				Me.SendPropertyChanged("warning")
				Me.OnwarningChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_properties", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property properties() As String
		Get
			Return Me._properties
		End Get
		Set
			If (String.Equals(Me._properties, value) = false) Then
				Me.OnpropertiesChanging(value)
				Me.SendPropertyChanging
				Me._properties = value
				Me.SendPropertyChanged("properties")
				Me.OnpropertiesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateHerb", DbType:="Date NOT NULL")>  _
	Public Property dateHerb() As Date
		Get
			Return Me._dateHerb
		End Get
		Set
			If ((Me._dateHerb = value)  _
						= false) Then
				Me.OndateHerbChanging(value)
				Me.SendPropertyChanging
				Me._dateHerb = value
				Me.SendPropertyChanged("dateHerb")
				Me.OndateHerbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Herb_HerbComment", Storage:="_HerbComments", ThisKey:="herbID", OtherKey:="herbID")>  _
	Public Property HerbComments() As EntitySet(Of HerbComment)
		Get
			Return Me._HerbComments
		End Get
		Set
			Me._HerbComments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Herb_HerbImg", Storage:="_HerbImgs", ThisKey:="herbID", OtherKey:="herbID")>  _
	Public Property HerbImgs() As EntitySet(Of HerbImg)
		Get
			Return Me._HerbImgs
		End Get
		Set
			Me._HerbImgs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Herb_HerbRating", Storage:="_HerbRatings", ThisKey:="herbID", OtherKey:="herbID")>  _
	Public Property HerbRatings() As EntitySet(Of HerbRating)
		Get
			Return Me._HerbRatings
		End Get
		Set
			Me._HerbRatings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Herb_HerbResearch", Storage:="_HerbResearches", ThisKey:="herbID", OtherKey:="herbREID")>  _
	Public Property HerbResearches() As EntitySet(Of HerbResearch)
		Get
			Return Me._HerbResearches
		End Get
		Set
			Me._HerbResearches.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_HerbComments(ByVal entity As HerbComment)
		Me.SendPropertyChanging
		entity.Herb = Me
	End Sub
	
	Private Sub detach_HerbComments(ByVal entity As HerbComment)
		Me.SendPropertyChanging
		entity.Herb = Nothing
	End Sub
	
	Private Sub attach_HerbImgs(ByVal entity As HerbImg)
		Me.SendPropertyChanging
		entity.Herb = Me
	End Sub
	
	Private Sub detach_HerbImgs(ByVal entity As HerbImg)
		Me.SendPropertyChanging
		entity.Herb = Nothing
	End Sub
	
	Private Sub attach_HerbRatings(ByVal entity As HerbRating)
		Me.SendPropertyChanging
		entity.Herb = Me
	End Sub
	
	Private Sub detach_HerbRatings(ByVal entity As HerbRating)
		Me.SendPropertyChanging
		entity.Herb = Nothing
	End Sub
	
	Private Sub attach_HerbResearches(ByVal entity As HerbResearch)
		Me.SendPropertyChanging
		entity.Herb = Me
	End Sub
	
	Private Sub detach_HerbResearches(ByVal entity As HerbResearch)
		Me.SendPropertyChanging
		entity.Herb = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HerbComment")>  _
Partial Public Class HerbComment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _herbCommentID As String
	
	Private _herbID As String
	
	Private _username As String
	
	Private _comment As String
	
	Private _date As Date
	
	Private _Herb As EntityRef(Of Herb)
	
	Private _Pharmacist As EntityRef(Of Pharmacist)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnherbCommentIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbCommentIDChanged()
    End Sub
    Partial Private Sub OnherbIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbIDChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OncommentChanging(value As String)
    End Sub
    Partial Private Sub OncommentChanged()
    End Sub
    Partial Private Sub OndateChanging(value As Date)
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Herb = CType(Nothing, EntityRef(Of Herb))
		Me._Pharmacist = CType(Nothing, EntityRef(Of Pharmacist))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbCommentID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property herbCommentID() As String
		Get
			Return Me._herbCommentID
		End Get
		Set
			If (String.Equals(Me._herbCommentID, value) = false) Then
				Me.OnherbCommentIDChanging(value)
				Me.SendPropertyChanging
				Me._herbCommentID = value
				Me.SendPropertyChanged("herbCommentID")
				Me.OnherbCommentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property herbID() As String
		Get
			Return Me._herbID
		End Get
		Set
			If (String.Equals(Me._herbID, value) = false) Then
				If Me._Herb.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnherbIDChanging(value)
				Me.SendPropertyChanging
				Me._herbID = value
				Me.SendPropertyChanged("herbID")
				Me.OnherbIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				If Me._Pharmacist.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comment", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property comment() As String
		Get
			Return Me._comment
		End Get
		Set
			If (String.Equals(Me._comment, value) = false) Then
				Me.OncommentChanging(value)
				Me.SendPropertyChanging
				Me._comment = value
				Me.SendPropertyChanged("comment")
				Me.OncommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="Date NOT NULL")>  _
	Public Property [date]() As Date
		Get
			Return Me._date
		End Get
		Set
			If ((Me._date = value)  _
						= false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Herb_HerbComment", Storage:="_Herb", ThisKey:="herbID", OtherKey:="herbID", IsForeignKey:=true)>  _
	Public Property Herb() As Herb
		Get
			Return Me._Herb.Entity
		End Get
		Set
			Dim previousValue As Herb = Me._Herb.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Herb.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Herb.Entity = Nothing
					previousValue.HerbComments.Remove(Me)
				End If
				Me._Herb.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HerbComments.Add(Me)
					Me._herbID = value.herbID
				Else
					Me._herbID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Herb")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pharmacist_HerbComment", Storage:="_Pharmacist", ThisKey:="username", OtherKey:="username", IsForeignKey:=true)>  _
	Public Property Pharmacist() As Pharmacist
		Get
			Return Me._Pharmacist.Entity
		End Get
		Set
			Dim previousValue As Pharmacist = Me._Pharmacist.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pharmacist.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pharmacist.Entity = Nothing
					previousValue.HerbComments.Remove(Me)
				End If
				Me._Pharmacist.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HerbComments.Add(Me)
					Me._username = value.username
				Else
					Me._username = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Pharmacist")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HerbImg")>  _
Partial Public Class HerbImg
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _herbImgID As String
	
	Private _herbID As String
	
	Private _leaf As String
	
	Private _leafImg As System.Data.Linq.Binary
	
	Private _branch As String
	
	Private _branchImg As System.Data.Linq.Binary
	
	Private _trunk As String
	
	Private _trunkImg As System.Data.Linq.Binary
	
	Private _root As String
	
	Private _rootImg As System.Data.Linq.Binary
	
	Private _flower As String
	
	Private _flowerImg As System.Data.Linq.Binary
	
	Private _fruit As String
	
	Private _fruitImg As System.Data.Linq.Binary
	
	Private _seed As String
	
	Private _seedImg As System.Data.Linq.Binary
	
	Private _Herb As EntityRef(Of Herb)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnherbImgIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbImgIDChanged()
    End Sub
    Partial Private Sub OnherbIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbIDChanged()
    End Sub
    Partial Private Sub OnleafChanging(value As String)
    End Sub
    Partial Private Sub OnleafChanged()
    End Sub
    Partial Private Sub OnleafImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnleafImgChanged()
    End Sub
    Partial Private Sub OnbranchChanging(value As String)
    End Sub
    Partial Private Sub OnbranchChanged()
    End Sub
    Partial Private Sub OnbranchImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnbranchImgChanged()
    End Sub
    Partial Private Sub OntrunkChanging(value As String)
    End Sub
    Partial Private Sub OntrunkChanged()
    End Sub
    Partial Private Sub OntrunkImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OntrunkImgChanged()
    End Sub
    Partial Private Sub OnrootChanging(value As String)
    End Sub
    Partial Private Sub OnrootChanged()
    End Sub
    Partial Private Sub OnrootImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnrootImgChanged()
    End Sub
    Partial Private Sub OnflowerChanging(value As String)
    End Sub
    Partial Private Sub OnflowerChanged()
    End Sub
    Partial Private Sub OnflowerImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnflowerImgChanged()
    End Sub
    Partial Private Sub OnfruitChanging(value As String)
    End Sub
    Partial Private Sub OnfruitChanged()
    End Sub
    Partial Private Sub OnfruitImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnfruitImgChanged()
    End Sub
    Partial Private Sub OnseedChanging(value As String)
    End Sub
    Partial Private Sub OnseedChanged()
    End Sub
    Partial Private Sub OnseedImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnseedImgChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Herb = CType(Nothing, EntityRef(Of Herb))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbImgID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property herbImgID() As String
		Get
			Return Me._herbImgID
		End Get
		Set
			If (String.Equals(Me._herbImgID, value) = false) Then
				Me.OnherbImgIDChanging(value)
				Me.SendPropertyChanging
				Me._herbImgID = value
				Me.SendPropertyChanged("herbImgID")
				Me.OnherbImgIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property herbID() As String
		Get
			Return Me._herbID
		End Get
		Set
			If (String.Equals(Me._herbID, value) = false) Then
				If Me._Herb.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnherbIDChanging(value)
				Me.SendPropertyChanging
				Me._herbID = value
				Me.SendPropertyChanged("herbID")
				Me.OnherbIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leaf", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property leaf() As String
		Get
			Return Me._leaf
		End Get
		Set
			If (String.Equals(Me._leaf, value) = false) Then
				Me.OnleafChanging(value)
				Me.SendPropertyChanging
				Me._leaf = value
				Me.SendPropertyChanged("leaf")
				Me.OnleafChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_leafImg", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property leafImg() As System.Data.Linq.Binary
		Get
			Return Me._leafImg
		End Get
		Set
			If (Object.Equals(Me._leafImg, value) = false) Then
				Me.OnleafImgChanging(value)
				Me.SendPropertyChanging
				Me._leafImg = value
				Me.SendPropertyChanged("leafImg")
				Me.OnleafImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_branch", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property branch() As String
		Get
			Return Me._branch
		End Get
		Set
			If (String.Equals(Me._branch, value) = false) Then
				Me.OnbranchChanging(value)
				Me.SendPropertyChanging
				Me._branch = value
				Me.SendPropertyChanged("branch")
				Me.OnbranchChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_branchImg", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property branchImg() As System.Data.Linq.Binary
		Get
			Return Me._branchImg
		End Get
		Set
			If (Object.Equals(Me._branchImg, value) = false) Then
				Me.OnbranchImgChanging(value)
				Me.SendPropertyChanging
				Me._branchImg = value
				Me.SendPropertyChanged("branchImg")
				Me.OnbranchImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trunk", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property trunk() As String
		Get
			Return Me._trunk
		End Get
		Set
			If (String.Equals(Me._trunk, value) = false) Then
				Me.OntrunkChanging(value)
				Me.SendPropertyChanging
				Me._trunk = value
				Me.SendPropertyChanged("trunk")
				Me.OntrunkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trunkImg", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property trunkImg() As System.Data.Linq.Binary
		Get
			Return Me._trunkImg
		End Get
		Set
			If (Object.Equals(Me._trunkImg, value) = false) Then
				Me.OntrunkImgChanging(value)
				Me.SendPropertyChanging
				Me._trunkImg = value
				Me.SendPropertyChanged("trunkImg")
				Me.OntrunkImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_root", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property root() As String
		Get
			Return Me._root
		End Get
		Set
			If (String.Equals(Me._root, value) = false) Then
				Me.OnrootChanging(value)
				Me.SendPropertyChanging
				Me._root = value
				Me.SendPropertyChanged("root")
				Me.OnrootChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rootImg", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property rootImg() As System.Data.Linq.Binary
		Get
			Return Me._rootImg
		End Get
		Set
			If (Object.Equals(Me._rootImg, value) = false) Then
				Me.OnrootImgChanging(value)
				Me.SendPropertyChanging
				Me._rootImg = value
				Me.SendPropertyChanged("rootImg")
				Me.OnrootImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_flower", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property flower() As String
		Get
			Return Me._flower
		End Get
		Set
			If (String.Equals(Me._flower, value) = false) Then
				Me.OnflowerChanging(value)
				Me.SendPropertyChanging
				Me._flower = value
				Me.SendPropertyChanged("flower")
				Me.OnflowerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_flowerImg", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property flowerImg() As System.Data.Linq.Binary
		Get
			Return Me._flowerImg
		End Get
		Set
			If (Object.Equals(Me._flowerImg, value) = false) Then
				Me.OnflowerImgChanging(value)
				Me.SendPropertyChanging
				Me._flowerImg = value
				Me.SendPropertyChanged("flowerImg")
				Me.OnflowerImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fruit", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property fruit() As String
		Get
			Return Me._fruit
		End Get
		Set
			If (String.Equals(Me._fruit, value) = false) Then
				Me.OnfruitChanging(value)
				Me.SendPropertyChanging
				Me._fruit = value
				Me.SendPropertyChanged("fruit")
				Me.OnfruitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fruitImg", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property fruitImg() As System.Data.Linq.Binary
		Get
			Return Me._fruitImg
		End Get
		Set
			If (Object.Equals(Me._fruitImg, value) = false) Then
				Me.OnfruitImgChanging(value)
				Me.SendPropertyChanging
				Me._fruitImg = value
				Me.SendPropertyChanged("fruitImg")
				Me.OnfruitImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_seed", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property seed() As String
		Get
			Return Me._seed
		End Get
		Set
			If (String.Equals(Me._seed, value) = false) Then
				Me.OnseedChanging(value)
				Me.SendPropertyChanging
				Me._seed = value
				Me.SendPropertyChanged("seed")
				Me.OnseedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_seedImg", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property seedImg() As System.Data.Linq.Binary
		Get
			Return Me._seedImg
		End Get
		Set
			If (Object.Equals(Me._seedImg, value) = false) Then
				Me.OnseedImgChanging(value)
				Me.SendPropertyChanging
				Me._seedImg = value
				Me.SendPropertyChanged("seedImg")
				Me.OnseedImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Herb_HerbImg", Storage:="_Herb", ThisKey:="herbID", OtherKey:="herbID", IsForeignKey:=true)>  _
	Public Property Herb() As Herb
		Get
			Return Me._Herb.Entity
		End Get
		Set
			Dim previousValue As Herb = Me._Herb.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Herb.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Herb.Entity = Nothing
					previousValue.HerbImgs.Remove(Me)
				End If
				Me._Herb.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HerbImgs.Add(Me)
					Me._herbID = value.herbID
				Else
					Me._herbID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Herb")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HerbRating")>  _
Partial Public Class HerbRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _herbRatingID As String
	
	Private _ratingHerb As Double
	
	Private _herbID As String
	
	Private _username As String
	
	Private _Herb As EntityRef(Of Herb)
	
	Private _Pharmacist As EntityRef(Of Pharmacist)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnherbRatingIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbRatingIDChanged()
    End Sub
    Partial Private Sub OnratingHerbChanging(value As Double)
    End Sub
    Partial Private Sub OnratingHerbChanged()
    End Sub
    Partial Private Sub OnherbIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbIDChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Herb = CType(Nothing, EntityRef(Of Herb))
		Me._Pharmacist = CType(Nothing, EntityRef(Of Pharmacist))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbRatingID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property herbRatingID() As String
		Get
			Return Me._herbRatingID
		End Get
		Set
			If (String.Equals(Me._herbRatingID, value) = false) Then
				Me.OnherbRatingIDChanging(value)
				Me.SendPropertyChanging
				Me._herbRatingID = value
				Me.SendPropertyChanged("herbRatingID")
				Me.OnherbRatingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ratingHerb", DbType:="Float NOT NULL")>  _
	Public Property ratingHerb() As Double
		Get
			Return Me._ratingHerb
		End Get
		Set
			If ((Me._ratingHerb = value)  _
						= false) Then
				Me.OnratingHerbChanging(value)
				Me.SendPropertyChanging
				Me._ratingHerb = value
				Me.SendPropertyChanged("ratingHerb")
				Me.OnratingHerbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property herbID() As String
		Get
			Return Me._herbID
		End Get
		Set
			If (String.Equals(Me._herbID, value) = false) Then
				If Me._Herb.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnherbIDChanging(value)
				Me.SendPropertyChanging
				Me._herbID = value
				Me.SendPropertyChanged("herbID")
				Me.OnherbIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				If Me._Pharmacist.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Herb_HerbRating", Storage:="_Herb", ThisKey:="herbID", OtherKey:="herbID", IsForeignKey:=true)>  _
	Public Property Herb() As Herb
		Get
			Return Me._Herb.Entity
		End Get
		Set
			Dim previousValue As Herb = Me._Herb.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Herb.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Herb.Entity = Nothing
					previousValue.HerbRatings.Remove(Me)
				End If
				Me._Herb.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HerbRatings.Add(Me)
					Me._herbID = value.herbID
				Else
					Me._herbID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Herb")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pharmacist_HerbRating", Storage:="_Pharmacist", ThisKey:="username", OtherKey:="username", IsForeignKey:=true)>  _
	Public Property Pharmacist() As Pharmacist
		Get
			Return Me._Pharmacist.Entity
		End Get
		Set
			Dim previousValue As Pharmacist = Me._Pharmacist.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pharmacist.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pharmacist.Entity = Nothing
					previousValue.HerbRatings.Remove(Me)
				End If
				Me._Pharmacist.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HerbRatings.Add(Me)
					Me._username = value.username
				Else
					Me._username = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Pharmacist")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HerbResearch")>  _
Partial Public Class HerbResearch
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _researchID As String
	
	Private _researchName As String
	
	Private _creditRe As String
	
	Private _link As String
	
	Private _herbREID As String
	
	Private _Herb As EntityRef(Of Herb)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnresearchIDChanging(value As String)
    End Sub
    Partial Private Sub OnresearchIDChanged()
    End Sub
    Partial Private Sub OnresearchNameChanging(value As String)
    End Sub
    Partial Private Sub OnresearchNameChanged()
    End Sub
    Partial Private Sub OncreditReChanging(value As String)
    End Sub
    Partial Private Sub OncreditReChanged()
    End Sub
    Partial Private Sub OnlinkChanging(value As String)
    End Sub
    Partial Private Sub OnlinkChanged()
    End Sub
    Partial Private Sub OnherbREIDChanging(value As String)
    End Sub
    Partial Private Sub OnherbREIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Herb = CType(Nothing, EntityRef(Of Herb))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_researchID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property researchID() As String
		Get
			Return Me._researchID
		End Get
		Set
			If (String.Equals(Me._researchID, value) = false) Then
				Me.OnresearchIDChanging(value)
				Me.SendPropertyChanging
				Me._researchID = value
				Me.SendPropertyChanged("researchID")
				Me.OnresearchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_researchName", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property researchName() As String
		Get
			Return Me._researchName
		End Get
		Set
			If (String.Equals(Me._researchName, value) = false) Then
				Me.OnresearchNameChanging(value)
				Me.SendPropertyChanging
				Me._researchName = value
				Me.SendPropertyChanged("researchName")
				Me.OnresearchNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creditRe", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property creditRe() As String
		Get
			Return Me._creditRe
		End Get
		Set
			If (String.Equals(Me._creditRe, value) = false) Then
				Me.OncreditReChanging(value)
				Me.SendPropertyChanging
				Me._creditRe = value
				Me.SendPropertyChanged("creditRe")
				Me.OncreditReChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_link", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property link() As String
		Get
			Return Me._link
		End Get
		Set
			If (String.Equals(Me._link, value) = false) Then
				Me.OnlinkChanging(value)
				Me.SendPropertyChanging
				Me._link = value
				Me.SendPropertyChanged("link")
				Me.OnlinkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_herbREID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property herbREID() As String
		Get
			Return Me._herbREID
		End Get
		Set
			If (String.Equals(Me._herbREID, value) = false) Then
				If Me._Herb.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnherbREIDChanging(value)
				Me.SendPropertyChanging
				Me._herbREID = value
				Me.SendPropertyChanged("herbREID")
				Me.OnherbREIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Herb_HerbResearch", Storage:="_Herb", ThisKey:="herbREID", OtherKey:="herbID", IsForeignKey:=true)>  _
	Public Property Herb() As Herb
		Get
			Return Me._Herb.Entity
		End Get
		Set
			Dim previousValue As Herb = Me._Herb.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Herb.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Herb.Entity = Nothing
					previousValue.HerbResearches.Remove(Me)
				End If
				Me._Herb.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HerbResearches.Add(Me)
					Me._herbREID = value.herbID
				Else
					Me._herbREID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Herb")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Infographic")>  _
Partial Public Class Infographic
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _infoID As String
	
	Private _infoName As String
	
	Private _infoImg As System.Data.Linq.Binary
	
	Private _creditInfo As String
	
	Private _dateInfo As Date
	
	Private _InfographicRatings As EntitySet(Of InfographicRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OninfoIDChanging(value As String)
    End Sub
    Partial Private Sub OninfoIDChanged()
    End Sub
    Partial Private Sub OninfoNameChanging(value As String)
    End Sub
    Partial Private Sub OninfoNameChanged()
    End Sub
    Partial Private Sub OninfoImgChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OninfoImgChanged()
    End Sub
    Partial Private Sub OncreditInfoChanging(value As String)
    End Sub
    Partial Private Sub OncreditInfoChanged()
    End Sub
    Partial Private Sub OndateInfoChanging(value As Date)
    End Sub
    Partial Private Sub OndateInfoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._InfographicRatings = New EntitySet(Of InfographicRating)(AddressOf Me.attach_InfographicRatings, AddressOf Me.detach_InfographicRatings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_infoID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property infoID() As String
		Get
			Return Me._infoID
		End Get
		Set
			If (String.Equals(Me._infoID, value) = false) Then
				Me.OninfoIDChanging(value)
				Me.SendPropertyChanging
				Me._infoID = value
				Me.SendPropertyChanged("infoID")
				Me.OninfoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_infoName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property infoName() As String
		Get
			Return Me._infoName
		End Get
		Set
			If (String.Equals(Me._infoName, value) = false) Then
				Me.OninfoNameChanging(value)
				Me.SendPropertyChanging
				Me._infoName = value
				Me.SendPropertyChanged("infoName")
				Me.OninfoNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_infoImg", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property infoImg() As System.Data.Linq.Binary
		Get
			Return Me._infoImg
		End Get
		Set
			If (Object.Equals(Me._infoImg, value) = false) Then
				Me.OninfoImgChanging(value)
				Me.SendPropertyChanging
				Me._infoImg = value
				Me.SendPropertyChanged("infoImg")
				Me.OninfoImgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creditInfo", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property creditInfo() As String
		Get
			Return Me._creditInfo
		End Get
		Set
			If (String.Equals(Me._creditInfo, value) = false) Then
				Me.OncreditInfoChanging(value)
				Me.SendPropertyChanging
				Me._creditInfo = value
				Me.SendPropertyChanged("creditInfo")
				Me.OncreditInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateInfo", DbType:="Date NOT NULL")>  _
	Public Property dateInfo() As Date
		Get
			Return Me._dateInfo
		End Get
		Set
			If ((Me._dateInfo = value)  _
						= false) Then
				Me.OndateInfoChanging(value)
				Me.SendPropertyChanging
				Me._dateInfo = value
				Me.SendPropertyChanged("dateInfo")
				Me.OndateInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Infographic_InfographicRating", Storage:="_InfographicRatings", ThisKey:="infoID", OtherKey:="infoID")>  _
	Public Property InfographicRatings() As EntitySet(Of InfographicRating)
		Get
			Return Me._InfographicRatings
		End Get
		Set
			Me._InfographicRatings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_InfographicRatings(ByVal entity As InfographicRating)
		Me.SendPropertyChanging
		entity.Infographic = Me
	End Sub
	
	Private Sub detach_InfographicRatings(ByVal entity As InfographicRating)
		Me.SendPropertyChanging
		entity.Infographic = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.InfographicRating")>  _
Partial Public Class InfographicRating
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _infoRatingID As String
	
	Private _ratingInfo As Double
	
	Private _infoID As String
	
	Private _username As String
	
	Private _Infographic As EntityRef(Of Infographic)
	
	Private _Pharmacist As EntityRef(Of Pharmacist)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OninfoRatingIDChanging(value As String)
    End Sub
    Partial Private Sub OninfoRatingIDChanged()
    End Sub
    Partial Private Sub OnratingInfoChanging(value As Double)
    End Sub
    Partial Private Sub OnratingInfoChanged()
    End Sub
    Partial Private Sub OninfoIDChanging(value As String)
    End Sub
    Partial Private Sub OninfoIDChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Infographic = CType(Nothing, EntityRef(Of Infographic))
		Me._Pharmacist = CType(Nothing, EntityRef(Of Pharmacist))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_infoRatingID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property infoRatingID() As String
		Get
			Return Me._infoRatingID
		End Get
		Set
			If (String.Equals(Me._infoRatingID, value) = false) Then
				Me.OninfoRatingIDChanging(value)
				Me.SendPropertyChanging
				Me._infoRatingID = value
				Me.SendPropertyChanged("infoRatingID")
				Me.OninfoRatingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ratingInfo", DbType:="Float NOT NULL")>  _
	Public Property ratingInfo() As Double
		Get
			Return Me._ratingInfo
		End Get
		Set
			If ((Me._ratingInfo = value)  _
						= false) Then
				Me.OnratingInfoChanging(value)
				Me.SendPropertyChanging
				Me._ratingInfo = value
				Me.SendPropertyChanged("ratingInfo")
				Me.OnratingInfoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_infoID", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property infoID() As String
		Get
			Return Me._infoID
		End Get
		Set
			If (String.Equals(Me._infoID, value) = false) Then
				If Me._Infographic.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OninfoIDChanging(value)
				Me.SendPropertyChanging
				Me._infoID = value
				Me.SendPropertyChanged("infoID")
				Me.OninfoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				If Me._Pharmacist.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Infographic_InfographicRating", Storage:="_Infographic", ThisKey:="infoID", OtherKey:="infoID", IsForeignKey:=true)>  _
	Public Property Infographic() As Infographic
		Get
			Return Me._Infographic.Entity
		End Get
		Set
			Dim previousValue As Infographic = Me._Infographic.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Infographic.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Infographic.Entity = Nothing
					previousValue.InfographicRatings.Remove(Me)
				End If
				Me._Infographic.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InfographicRatings.Add(Me)
					Me._infoID = value.infoID
				Else
					Me._infoID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Infographic")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pharmacist_InfographicRating", Storage:="_Pharmacist", ThisKey:="username", OtherKey:="username", IsForeignKey:=true)>  _
	Public Property Pharmacist() As Pharmacist
		Get
			Return Me._Pharmacist.Entity
		End Get
		Set
			Dim previousValue As Pharmacist = Me._Pharmacist.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pharmacist.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pharmacist.Entity = Nothing
					previousValue.InfographicRatings.Remove(Me)
				End If
				Me._Pharmacist.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InfographicRatings.Add(Me)
					Me._username = value.username
				Else
					Me._username = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Pharmacist")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Pharmacist")>  _
Partial Public Class Pharmacist
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _username As String
	
	Private _password As String
	
	Private _email As String
	
	Private _encrypPass As String
	
	Private _ArticleRatings As EntitySet(Of ArticleRating)
	
	Private _DiseaseRatings As EntitySet(Of DiseaseRating)
	
	Private _HerbComments As EntitySet(Of HerbComment)
	
	Private _HerbRatings As EntitySet(Of HerbRating)
	
	Private _InfographicRatings As EntitySet(Of InfographicRating)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnencrypPassChanging(value As String)
    End Sub
    Partial Private Sub OnencrypPassChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ArticleRatings = New EntitySet(Of ArticleRating)(AddressOf Me.attach_ArticleRatings, AddressOf Me.detach_ArticleRatings)
		Me._DiseaseRatings = New EntitySet(Of DiseaseRating)(AddressOf Me.attach_DiseaseRatings, AddressOf Me.detach_DiseaseRatings)
		Me._HerbComments = New EntitySet(Of HerbComment)(AddressOf Me.attach_HerbComments, AddressOf Me.detach_HerbComments)
		Me._HerbRatings = New EntitySet(Of HerbRating)(AddressOf Me.attach_HerbRatings, AddressOf Me.detach_HerbRatings)
		Me._InfographicRatings = New EntitySet(Of InfographicRating)(AddressOf Me.attach_InfographicRatings, AddressOf Me.detach_InfographicRatings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_encrypPass", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property encrypPass() As String
		Get
			Return Me._encrypPass
		End Get
		Set
			If (String.Equals(Me._encrypPass, value) = false) Then
				Me.OnencrypPassChanging(value)
				Me.SendPropertyChanging
				Me._encrypPass = value
				Me.SendPropertyChanged("encrypPass")
				Me.OnencrypPassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pharmacist_ArticleRating", Storage:="_ArticleRatings", ThisKey:="username", OtherKey:="username")>  _
	Public Property ArticleRatings() As EntitySet(Of ArticleRating)
		Get
			Return Me._ArticleRatings
		End Get
		Set
			Me._ArticleRatings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pharmacist_DiseaseRating", Storage:="_DiseaseRatings", ThisKey:="username", OtherKey:="username")>  _
	Public Property DiseaseRatings() As EntitySet(Of DiseaseRating)
		Get
			Return Me._DiseaseRatings
		End Get
		Set
			Me._DiseaseRatings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pharmacist_HerbComment", Storage:="_HerbComments", ThisKey:="username", OtherKey:="username")>  _
	Public Property HerbComments() As EntitySet(Of HerbComment)
		Get
			Return Me._HerbComments
		End Get
		Set
			Me._HerbComments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pharmacist_HerbRating", Storage:="_HerbRatings", ThisKey:="username", OtherKey:="username")>  _
	Public Property HerbRatings() As EntitySet(Of HerbRating)
		Get
			Return Me._HerbRatings
		End Get
		Set
			Me._HerbRatings.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pharmacist_InfographicRating", Storage:="_InfographicRatings", ThisKey:="username", OtherKey:="username")>  _
	Public Property InfographicRatings() As EntitySet(Of InfographicRating)
		Get
			Return Me._InfographicRatings
		End Get
		Set
			Me._InfographicRatings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ArticleRatings(ByVal entity As ArticleRating)
		Me.SendPropertyChanging
		entity.Pharmacist = Me
	End Sub
	
	Private Sub detach_ArticleRatings(ByVal entity As ArticleRating)
		Me.SendPropertyChanging
		entity.Pharmacist = Nothing
	End Sub
	
	Private Sub attach_DiseaseRatings(ByVal entity As DiseaseRating)
		Me.SendPropertyChanging
		entity.Pharmacist = Me
	End Sub
	
	Private Sub detach_DiseaseRatings(ByVal entity As DiseaseRating)
		Me.SendPropertyChanging
		entity.Pharmacist = Nothing
	End Sub
	
	Private Sub attach_HerbComments(ByVal entity As HerbComment)
		Me.SendPropertyChanging
		entity.Pharmacist = Me
	End Sub
	
	Private Sub detach_HerbComments(ByVal entity As HerbComment)
		Me.SendPropertyChanging
		entity.Pharmacist = Nothing
	End Sub
	
	Private Sub attach_HerbRatings(ByVal entity As HerbRating)
		Me.SendPropertyChanging
		entity.Pharmacist = Me
	End Sub
	
	Private Sub detach_HerbRatings(ByVal entity As HerbRating)
		Me.SendPropertyChanging
		entity.Pharmacist = Nothing
	End Sub
	
	Private Sub attach_InfographicRatings(ByVal entity As InfographicRating)
		Me.SendPropertyChanging
		entity.Pharmacist = Me
	End Sub
	
	Private Sub detach_InfographicRatings(ByVal entity As InfographicRating)
		Me.SendPropertyChanging
		entity.Pharmacist = Nothing
	End Sub
End Class
